# build libsyndicate.so

import os

# add additional source files here
source_files = Glob("*.cpp")

# add source file search paths here
CPPPATH = """
"""

# add library paths here
LIBPATH = """
"""

# add libraries here
LIBS = """
   curl
   protobuf
   pthread
   ssl
   crypto
   uriparser
   microhttpd
   rt
   dl
   m
"""

# add headers here (will be returned by SCons)
headers = Glob("*.h")

# add additional CPPFLAGS here
CPPFLAGS = ""

# add additional CPPDEFINES here
CPPDEFINES = [
   "_REENTRANT",
   "_THREAD_SAFE"
]

# get our environment
Import('env')
env = env.Clone()

Import('protobuf_cc_files')
Import('protobuf_out')

env.Append(LIBS = Split(LIBS))
env.Append(CPPPATH = Split(CPPPATH))
env.Append(CPPPATH = "#" + protobuf_out)
env.Append(CPPFLAGS = CPPFLAGS)
env.Append(CPPDEFINES = CPPDEFINES)

# generate the shared library, from generated protobuf cc files and from libsyndicate source
libsyndicate = env.SharedLibrary( target="libsyndicate.so", source=[protobuf_cc_files, Split(source_files)] )

# generate header and source paths
header_paths = [os.path.join( x.path ) for x in Split(headers)]
source_paths = [os.path.join( x.path ) for x in Split(source_files)] 
Return( 'libsyndicate header_paths source_paths' )

