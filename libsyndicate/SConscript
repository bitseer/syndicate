# build libsyndicate.so

import os

# get our environment
Import('env')
env = env.Clone()

Import('protobuf_cc_files')
Import('protobuf_out')
Import('extra_args')

BASE_FILES = """
   cache.cpp
   client.cpp
   crypt.cpp
   closure.cpp
   download.cpp
   gateway.cpp
   httpd.cpp
   ini.cpp
   libsyndicate.cpp
   manifest.cpp
   opts.cpp
   server.cpp
   storage.cpp
   system.cpp
   url.cpp
   util.cpp
   workqueue.cpp
"""

MS_CLIENT_FILES = Glob("ms/*.cpp")
SCRYPT_FILES = Glob("scrypt/*.cpp")

# build at least the base files...
protobuf_files = "\n".join( ["#" + protobuf_out + "/" + os.path.basename(x.path) for x in protobuf_cc_files] )
source_files = BASE_FILES + "\n".join( ["#" + x.path for x in SCRYPT_FILES] ) + "\n" + "\n".join( ["#" + x.path for x in MS_CLIENT_FILES] )

# add source file search paths here
CPPPATH = """
   scrypt
"""

# add library paths here
LIBPATH = """
"""

# json library is different on Debian...
json_lib = "json"
distro_switch = ""

if extra_args.has_key("LIBJSON"):
   json_lib = extra_args["LIBJSON"]

# add libraries here
LIBS = """
   curl
   protobuf
   pthread
   crypto
   ssl
   microhttpd
   rt
   m
   dl
   z
   %s
""" % json_lib

# add headers here (will be returned by SCons)
# TODO: don't return httpd headers if we're not building it
headers = Glob("*.h")
scrypt_headers = Glob("scrypt/*.h")
ms_client_headers = Glob("ms/*.h")

# add additional CPPFLAGS here
CPPFLAGS = distro_switch

# add additional CPPDEFINES here
CPPDEFINES = [
   "_REENTRANT",
   "_THREAD_SAFE"
]

# environment...
env.Append(CPPPATH = Split(CPPPATH))
env.Append(CPPPATH = "#" + protobuf_out)
env.Append(CPPFLAGS = CPPFLAGS)
env.Append(CPPDEFINES = CPPDEFINES)

global_LIBS = env['LIBS']
global_LINK = env['LINK_FLAGS']

def create_sobjs(SRCS, path="", this_env=None):
   if this_env is None:
      this_env = env

   return [this_env.SharedObject(path+src) for src in SRCS]

def create_objs(SRCS, path="", this_env=None):
   if this_env is None:
      this_env = env

   return [this_env.Object(path+src) for src in SRCS]

# protobuf objects
protobuf_objs = [env.SharedObject(x) for x in protobuf_cc_files]

# full library
libsyndicate = env.SharedLibrary( "libsyndicate.so", protobuf_objs + create_sobjs( Split(source_files) ), LIBS=Split(LIBS + global_LIBS), LINKFLAGS=global_LINK)

# generate header and source paths
header_paths = [os.path.join( x.path ) for x in Split(headers)]
scrypt_header_paths = [os.path.join( x.path ) for x in Split(scrypt_headers)]
ms_client_header_paths = [os.path.join( x.path ) for x in Split(ms_client_headers)]
source_paths = [os.path.join( x ) for x in Split(source_files)] 
Return( 'libsyndicate header_paths scrypt_header_paths ms_client_header_paths source_paths' )
