#!/usr/bin/python

"""
   Copyright 2015 The Trustees of Princeton University

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""


import traceback
import os
import sys
import errno

def get_or_make_storage_dir( config, chunk_path ):
   """
   Generate the directories on the path to a given chunk.
   Return (0, on-disk path) on success.
   Return (-errno, None) on failure.
   """
   
   STORAGE_DIR = str(config.get('STORAGE_DIR', ""))
   if len(STORAGE_DIR) == 0:
      
      print >> sys.stderr, "No STORAGE_DIR configured"
      sys.stderr.flush()
      return (-errno.EINVAL, None )
   
   storage_path = os.path.join( STORAGE_DIR, chunk_path )
   storage_dir = os.path.dirname( storage_path )

   if not os.path.exists( storage_dir ):
      os.makedirs( storage_dir )

   return (0, storage_path)


def read_chunk( chunk_path, outfile, config, secrets ):
   
   rc, storage_path = get_or_make_storage_dir( config, chunk_path )
   if rc != 0:
       return rc

   fd = None 
   
   try:
      fd = open( storage_path, "r" )
      outfile.write( fd.read() )
      
   except Exception, e:
      
      print >> sys.stderr, traceback.format_exc()
      sys.stderr.flush()
      return -errno.EIO
   
   finally:
      if fd is not None:
         try:
            fd.close()
         except:
            pass
         
   return 0


def write_chunk( chunk_path, chunk_buf, config, secrets ):
   
   rc, storage_path = get_or_make_storage_dir( config, chunk_path )
   if rc != 0:
       return rc
   
   fd = None
   try:
      fd = open( storage_path, "w" )
      fd.write( chunk_buf )
      
   except Exception, e:
      
      print >> sys.stderr, traceback.format_exc()
      sys.stderr.flush()
      return -errno.EIO
   
   finally:
      if fd is not None:
         try:
            fd.close()
         except:
            pass
         
   return 0


def delete_chunk( chunk_path, config, secrets ):

   rc, storage_path = get_or_make_storage_dir( config, chunk_path )
   if rc != 0:
       return rc
   
   try:
      os.unlink( storage_path )
   
   except Exception, e:
      
      print >> sys.stderr, traceback.format_exc()
      sys.stderr.flush()
      return -errno.EIO
   
   return 0
