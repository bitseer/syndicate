# build ms

import os

Import('env')
env = env.Clone()

# get the protobuf .py file paths
Import('protobuf_py_files')

# get a list of ms files...
# yaml files
ms_files = Glob("*.yaml")

# base files
ms_files.extend( Glob("*.py") )

# googlepb files
ms_files.extend( Glob("googlepb/*.py") )
ms_files.extend( Glob("googlepb/protobuf/*.py") )
ms_files.extend( Glob("googlepb/protobuf/internal/*.py" ) )
ms_files.extend( Glob("googlepb/protobuf/compiler/*.py" ) )

# protobuf utilities
ms_files.extend( Glob("protobufs/*.py") )
protobuf_util = Glob("protobufs/__init__.py")
protobuf_util.extend( Glob("protobufs/protobuf_to_dict.py"))

# get a list of common files...
ms_files.extend( Glob("common/*.py") )

# get a list of client files...
ms_files.extend( Glob("clients/python/*.py") )

# get a list of client programs....
ms_files.extend( Glob("clients/python/bin/*.py") )

# development build?
if env["devel"]:
   ms_files.extend( Glob("tests/__init__.py") )
   ms_files.extend( Glob("tests/setup.py") )
   ms_files.extend( Glob("tests/debughandler.py") )
   ms_files.extend( Glob("tests/*.sh") )
   ms_files.extend( Glob("tests/*.pem") )
   ms_files.extend( Glob("tests/__init__.py") )
   ms_files.extend( Glob("tests/test_syntool.py") )
   ms_files.extend( Glob("tests/user_test_key.pem") )
   ms_files.extend( Glob("tests/local_setup.sh") )

# openid
ms_files.extend( Glob("openid/*.py") )
ms_files.extend( Glob("openid/server/*.py") )
ms_files.extend( Glob("openid/extensions/*.py") )
ms_files.extend( Glob("openid/extensions/draft/*.py") )
ms_files.extend( Glob("openid/store/*.py") )
ms_files.extend( Glob("openid/consumer/*.py") )
ms_files.extend( Glob("openid/yadis/*.py") )

# storage
ms_files.extend( Glob("storage/*.py") )
ms_files.extend( Glob("storage/backends/*.py") )

# MS
ms_files.extend( Glob("MS/*.py") )
ms_files.extend( Glob("MS/methods/*.py") )

# common MS files
ms_files.extend( Glob("common/*.py") )

pypb_cmds = []
for pypb in protobuf_py_files:
   # replace all instances of "google." with "googlepb.", so we can use them in GAE (since there's a conflicting incompatible protobufs package)
   cmd = env.Command( "protobufs/%s" % (os.path.basename(pypb.path)), "#" + pypb.path, "echo '# AUTOMATICALLY GENERATED BY SCons.  DO NOT EDIT' > $TARGET; cat $SOURCE | sed 's/google\./googlepb\./g' >> $TARGET" )
   pypb_cmds.append( cmd )

ms = ms_files + pypb_cmds

Return( 'ms' )
