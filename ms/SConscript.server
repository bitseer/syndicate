# build ms

import os

Import('env')
env = env.Clone()

# ----------------------------------------

# get the protobuf .py file paths
Import('protobuf_py_files')

# get a list of ms files...
# yaml files
ms_files = Glob("*.yaml")

# base files
ms_files.extend( Glob("*.py") )

# googlepb files
ms_files.extend( Glob("googlepb/*.py") )
ms_files.extend( Glob("googlepb/protobuf/*.py") )
ms_files.extend( Glob("googlepb/protobuf/internal/*.py" ) )
ms_files.extend( Glob("googlepb/protobuf/compiler/*.py" ) )

# protobuf utilities
ms_files.extend( Glob("protobufs/*.py") )
protobuf_util = Glob("protobufs/__init__.py")
protobuf_util.extend( Glob("protobufs/protobuf_to_dict.py"))

# get a list of common files...
ms_files.extend( Glob("common/*.py") )
ms_files.extend( Glob("common/*.pyin") )
ms_files.extend( Glob("*.yamlin") )

# get a list of client files...
ms_files.extend( Glob("clients/python/*.py") )

# get a list of client programs....
ms_files.extend( Glob("clients/python/bin/*.py") )

# development build?
if env["devel"]:
   ms_files.extend( Glob("tests/__init__.py") )
   ms_files.extend( Glob("tests/setup.py") )
   ms_files.extend( Glob("tests/debughandler.py") )
   ms_files.extend( Glob("tests/*.sh") )
   ms_files.extend( Glob("tests/*.pem") )
   ms_files.extend( Glob("tests/__init__.py") )
   ms_files.extend( Glob("tests/test_syntool.py") )
   ms_files.extend( Glob("tests/user_test_key.pem") )
   ms_files.extend( Glob("tests/local_setup.sh") )

# openid
ms_files.extend( Glob("openid/*.py") )
ms_files.extend( Glob("openid/server/*.py") )
ms_files.extend( Glob("openid/extensions/*.py") )
ms_files.extend( Glob("openid/extensions/draft/*.py") )
ms_files.extend( Glob("openid/store/*.py") )
ms_files.extend( Glob("openid/consumer/*.py") )
ms_files.extend( Glob("openid/yadis/*.py") )

# storage
ms_files.extend( Glob("storage/*.py") )
ms_files.extend( Glob("storage/backends/*.py") )

# MS
ms_files.extend( Glob("MS/*.py") )
ms_files.extend( Glob("MS/methods/*.py") )

# common MS files
ms_files.extend( Glob("common/*.py") )

# ----------------------------------------

# generate admin info
Import("extra_args")

def load_pubkey_file( path ):
   path = os.path.expanduser( path )
   fd = open(path, "r")
   buf = fd.read()
   fd.close()
   buf = buf.strip()

   # validate key
   try:
      from Crypto.PublicKey import RSA as CryptoKey
   except ImportError, ie:
      print >> sys.stderr, "\nERR: PyCrypto module could not be loaded.  Please check your installation and try again.\n"
      raise ie

   try:
      key = CryptoKey.importKey( buf )
   except Exception, e:
      print >> sys.stderr, "\nCould not parse key from %s\n" % path
      raise e

   assert not key.has_private(), "%s is not a public key" % path

   return key.publickey().exportKey()


# validate and translate the particular keyword arguments
arg_handlers = {
   "pubkey": load_pubkey_file,
   "appname": None,
   "openid_url": None,
   "user_id": None
}

def raise_(msg):
   print "\n%s\n" % msg
   raise Exception(msg)

default_args = {
   "pubkey": lambda: raise_("No public key given.  Pass pubkey=/path/to/your/public/key.pub"),
   "appname": lambda: raise_("No application name given.  Please pass appname=YOUR-APP-NAME"),
   "openid_url": lambda: "",
   "user_id": lambda: raise_("No admin user ID given.  Please pass user_id=YOUR.ADMIN.EMAIL@EXAMPLE.COM")
}


# install defaults
for (argname, default_func) in default_args.items():
   if argname not in extra_args.keys():
      extra_args[argname] = default_func()

validated_args = {}
validated_args.update( extra_args )

# process args
for (argname, argvalue) in extra_args.items():
   if argname not in arg_handlers.keys():
      continue

   arg_handler = arg_handlers[argname]
   if arg_handler is None:
      continue

   arg = arg_handler( argvalue )
   validated_args[argname] = arg


def build_template( target, source, env ):
   print "source = %s" % source[0].path
   print "target = %s" % target[0].path
   print "extra_args = %s" % extra_args

   source_path = source[0].path
   target_path = target[0].path

   template_fd = open( str(source_path), "r" )
   template_data = template_fd.read()
   template_fd.close()

   target_data = template_data % validated_args

   template_fd = open( str(target_path), "w" )
   template_fd.write( target_data )
   template_fd.close()

   env.Install(target)
   return None

python_bld = Builder( action=build_template, suffix=".py", src_suffix=".pyin" )
yaml_bld = Builder( action=build_template, suffix=".yaml", src_suffix=".yamlin" )

env['BUILDERS']['PyTemplate'] = python_bld
env['BUILDERS']['YamlTemplate'] = yaml_bld

# ----------------------------------------

admin_info = env.PyTemplate( "common/admin_info.pyin" )
app_info = env.YamlTemplate( "app.yamlin" )


pypb_cmds = []
for pypb in protobuf_py_files:
   # replace all instances of "google." with "googlepb.", so we can use them in GAE (since there's a conflicting incompatible protobufs package)
   cmd = env.Command( "protobufs/%s" % (os.path.basename(pypb.path)), "#" + pypb.path, "echo '# AUTOMATICALLY GENERATED BY SCons.  DO NOT EDIT' > $TARGET; cat $SOURCE | sed 's/google\./googlepb\./g' >> $TARGET" )
   pypb_cmds.append( cmd )

ms = ms_files + pypb_cmds + [admin_info, app_info]

Return( 'ms' )

