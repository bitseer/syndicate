"""
   Copyright 2013 The Trustees of Princeton University

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

# build ms

import os

Import('env')
env = env.Clone()

# ----------------------------------------

# get the protobuf .py file paths
Import('protobuf_py_files')

# get a list of ms files...
# yaml files
ms_files = Glob("*.yaml")

# base files
ms_files.extend( Glob("*.py") )

# google protobuf files
ms_files.extend( Glob("google/*.py") )
ms_files.extend( Glob("google/protobuf/*.py") )
ms_files.extend( Glob("google/protobuf/internal/*.py" ) )
ms_files.extend( Glob("google/protobuf/compiler/*.py" ) )

# protobuf utilities
ms_files.extend( Glob("protobufs/*.py") )
protobuf_util = Glob("protobufs/__init__.py")
protobuf_util.extend( Glob("protobufs/protobuf_to_dict.py"))

# get a list of common files...
ms_files.extend( Glob("common/*.py") )
ms_files.extend( Glob("common/*.pyin") )
ms_files.extend( Glob("*.yamlin") )
ms_files.extend( Glob("*.pyin") )

# get a list of client files...
ms_files.extend( Glob("clients/python/*.py") )

# get a list of client programs....
ms_files.extend( Glob("clients/python/bin/*.py") )

"""
# development build?
if env["devel"]:
   ms_files.extend( Glob("tests/__init__.py") )
   ms_files.extend( Glob("tests/setup.py") )
   ms_files.extend( Glob("tests/debughandler.py") )
   ms_files.extend( Glob("tests/*.sh") )
   ms_files.extend( Glob("tests/*.pem") )
   ms_files.extend( Glob("tests/__init__.py") )
   ms_files.extend( Glob("tests/test_syntool.py") )
   ms_files.extend( Glob("tests/user_test_key.pem") )
   ms_files.extend( Glob("tests/user_test_key.pub") )
   ms_files.extend( Glob("tests/local_setup.sh") )
"""

# openid
ms_files.extend( Glob("openid/*.py") )
ms_files.extend( Glob("openid/server/*.py") )
ms_files.extend( Glob("openid/extensions/*.py") )
ms_files.extend( Glob("openid/extensions/draft/*.py") )
ms_files.extend( Glob("openid/store/*.py") )
ms_files.extend( Glob("openid/consumer/*.py") )
ms_files.extend( Glob("openid/yadis/*.py") )

# storage
ms_files.extend( Glob("storage/*.py") )
ms_files.extend( Glob("storage/backends/*.py") )

# MS
ms_files.extend( Glob("MS/*.py") )
ms_files.extend( Glob("MS/methods/*.py") )

# common MS files
ms_files.extend( Glob("common/*.py") )

# ----------------------------------------

# generate admin info
Import("extra_args")

def load_key( buf ):
   # validate key
   try:
      from Crypto.PublicKey import RSA as CryptoKey
   except ImportError, ie:
      print >> sys.stderr, "\nERR: PyCrypto module could not be loaded.  Please check your installation and try again.\n"
      raise ie

   try:
      key = CryptoKey.importKey( buf )
   except Exception, e:
      print >> sys.stderr, "\nCould not parse key from %s\n" % path
      raise e

   return key

def load_pubkey_file( path ):
   if path is None:
      return ""
   
   path = os.path.expanduser( path )
   fd = open(path, "r")
   buf = fd.read()
   fd.close()
   buf = buf.strip()

   key = load_key( buf )
   assert not key.has_private(), "%s is not a public key" % path

   return key.publickey().exportKey()

def load_or_make_syndicate_key( path ):
   if path is not None:
      path = os.path.expanduser( path )
      fd = open(path, "r")
      buf = fd.read()
      fd.close()
      buf = buf.strip()
         
      # got a key. Try to load it
      key = load_key( buf )
      assert key.has_private(), "%s is not a private key" % path
      
      return key.exportKey()

   # no key given.  Make one
   print "Generating Syndicate keys..."
   try:
      from Crypto.PublicKey import RSA as CryptoKey
      from Crypto import Random 
   except ImportError, ie:
      print >> sys.stderr, "\nERR: PyCrypto module could not be loaded.  Please check your installation and try again.\n"
      raise ie

   rng = Random.new().read
   key = CryptoKey.generate(4096, rng)
   return key.exportKey()


# validate and translate the particular keyword arguments
arg_handlers = {
   "pubkey": load_pubkey_file,
   "syndicate_private_key": load_or_make_syndicate_key,
   "syndicate_public_key": None,
   "syndicate_name": None,
   "openid_url": None,
   "user_id": None,
   "register_password": None,
   "devel": None
}

def raise_(msg):
   print "\nERROR: %s\n" % msg
   raise Exception(msg)

def warn_(msg):
   print "WARNING: %s" % msg

def warn_and_value(msg, value):
   print "WARNING: %s" % msg
   return value

default_register_password = "letmein"

default_args = {
   "pubkey": lambda: warn_("No administrator public key given.  You can set it later with syntool.py"),
   "syndicate_name": lambda: raise_("No application name given.  Please pass syndicate_name=YOUR-SYNDICATE-NAME"),
   "openid_url": lambda: "",
   "user_id": lambda: raise_("No admin user ID given.  Please pass user_id=YOUR.ADMIN.EMAIL@EXAMPLE.COM"),
   "syndicate_private_key": lambda: None,
   "syndicate_public_key": lambda: None,
   "register_password": lambda: warn_and_value("No administrator public key activation password set.  Using the default: '%s'" % default_register_password, default_register_password),
   "devel": lambda: str( extra_args.get("devel", False) )
}


def public_key_from_private_key( privkey_str ):
   if privkey_str is None or len(privkey_str) == 0:
      return ""

   try:
      from Crypto.PublicKey import RSA as CryptoKey
   except ImportError, ie:
      print >> sys.stderr, "\nERR: PyCrypto module could not be loaded.  Please check your installation and try again.\n"
      raise ie

   key = CryptoKey.importKey( privkey_str )
   pubkey_str = key.publickey().exportKey()
   return pubkey_str

post_process_args = {
   "syndicate_public_key": lambda args: public_key_from_private_key( args.get("syndicate_private_key") )
}

# install defaults
for (argname, default_func) in default_args.items():
   if argname not in extra_args.keys():
      extra_args[argname] = default_func()

validated_args = {}
validated_args.update( extra_args )

# process args
for (argname, argvalue) in extra_args.items():
   if argname not in arg_handlers.keys():
      continue

   arg_handler = arg_handlers[argname]
   if arg_handler is None:
      continue

   arg = arg_handler( argvalue )
   validated_args[argname] = arg

# post-process args
for (argname, argfunc) in post_process_args.items():
   validated_args[argname] = argfunc( validated_args )


def build_template( target, source, env ):
   print "source = %s" % source[0].path
   print "target = %s" % target[0].path
   print "extra_args = %s" % extra_args

   source_path = source[0].path
   target_path = target[0].path

   template_fd = open( str(source_path), "r" )
   template_data = template_fd.read()
   template_fd.close()

   target_data = template_data % validated_args

   template_fd = open( str(target_path), "w" )
   template_fd.write( target_data )
   template_fd.close()

   env.Install(target)
   return None

python_bld = Builder( action=build_template, suffix=".py", src_suffix=".pyin" )
yaml_bld = Builder( action=build_template, suffix=".yaml", src_suffix=".yamlin" )

env['BUILDERS']['PyTemplate'] = python_bld
env['BUILDERS']['YamlTemplate'] = yaml_bld

# ----------------------------------------

admin_info = env.PyTemplate( "common/admin_info.pyin" )
app_info = env.YamlTemplate( "app.yamlin" )

# make sure these always build
env.AlwaysBuild( admin_info )
env.AlwaysBuild( app_info )

pypb_cmds = []
for pypb in protobuf_py_files:
   # add code to fix protobuf imports
   if os.path.basename(pypb.path) != "__init__.py":
      cmd = env.Command( "protobufs/%s" % (os.path.basename(pypb.path)), "#" + pypb.path, "echo '# AUTOMATICALLY GENERATED BY SCons.  DO NOT EDIT' > $TARGET; cat ms/google_protobuf_fixer.pyin >> $TARGET; cat $SOURCE >> $TARGET" )
      pypb_cmds.append( cmd )

ms = ms_files + pypb_cmds + [admin_info, app_info]

Return( 'ms' )

