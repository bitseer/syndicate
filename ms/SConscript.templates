import os
import sys

#Import('env')
#env = env.Clone()

# generate admin info
Import("extra_args")

def load_pubkey_file( path ):
   path = os.path.expanduser( path )
   fd = open(path, "r")
   buf = fd.read()
   fd.close()
   buf = buf.strip()

   # validate key
   try:
      from Crypto.PublicKey import RSA as CryptoKey
   except ImportError, ie:
      print >> sys.stderr, "\nERR: PyCrypto module could not be loaded.  Please check your installation and try again.\n"
      raise ie

   try:
      key = CryptoKey.importKey( buf )
   except Exception, e:
      print >> sys.stderr, "\nCould not parse key from %s\n" % path
      raise e

   assert not key.has_private(), "%s is not a public key" % path

   return key.publickey().exportKey()


# validate and translate the particular keyword arguments
arg_handlers = {
   "pubkey": load_pubkey_file,
   "appname": None,
   "openid_url": None,
   "user_id": None
}

def raise_(msg):
   print "\n%s\n" % msg
   raise Exception(msg)

default_args = {
   "pubkey": lambda: raise_("No public key given.  Pass pubkey=/path/to/your/public/key.pub"),
   "appname": lambda: raise_("No application name given.  Please pass appname=YOUR-APP-NAME"),
   "openid_url": lambda: "",
   "user_id": lambda: raise_("No admin user ID given.  Please pass user_id=YOUR.ADMIN.EMAIL@EXAMPLE.COM")
}


# install defaults
for (argname, default_func) in default_args.items():
   if argname not in extra_args.keys():
      extra_args[argname] = default_func()
   
validated_args = {}
validated_args.update( extra_args )

# process args
for (argname, argvalue) in extra_args.items():
   if argname not in arg_handlers.keys():
      continue

   arg_handler = arg_handlers[argname]
   if arg_handler is None:
      continue

   arg = arg_handler( argvalue )
   validated_args[argname] = arg


def build_template( target, source, env ):
   print "source = %s" % source[0].path
   print "target = %s" % target[0].path
   print "extra_args = %s" % extra_args

   source_path = source[0].path
   target_path = target[0].path

   template_fd = open( str(source_path), "r" )
   template_data = template_fd.read()
   template_fd.close()

   target_data = template_data % validated_args

   template_fd = open( str(target_path), "w" )
   template_fd.write( target_data )
   template_fd.close()

   env.Install(target)
   return None

python_bld = Builder( action=build_template, suffix=".py", src_suffix=".pyin" )
yaml_bld = Builder( action=build_template, suffix=".yaml", src_suffix=".yamlin" )

env = Environment( BUILDERS = {"PyTemplate": python_bld, "YamlTemplate": yaml_bld } )

admin_info = env.PyTemplate( "common/admin_info.pyin" )
app_info = env.YamlTemplate( "app.yamlin" )

Return( 'admin_info app_info' )

