# build ms

import os

Import('env')
env = env.Clone()

# get the protobuf .py file paths
Import('protobuf_py_files')

# get a list of common files...
common_files = Glob("common/*.py")

# get a list of client files...
TOOL_BIN = "syntool.py"
client_files = Glob("clients/*.py")
client_files.extend( Glob("clients/syntool/*.py") )

# get a list of ms files...
# yaml files
ms_files = Glob("*.yaml")

# base files
ms_files.extend( Glob("*.py") )

# googlepb files
ms_files.extend( Glob("googlepb/*.py") )
ms_files.extend( Glob("googlepb/protobuf/*.py") )
ms_files.extend( Glob("googlepb/protobuf/internal/*.py" ) )
ms_files.extend( Glob("googlepb/protobuf/compiler/*.py" ) )

# protobuf utilities
ms_files.extend( Glob("protobufs/*.py") )
protobuf_util = Glob("protobufs/__init__.py")
protobuf_util.extend( Glob("protobufs/protobuf_to_dict.py"))

# temporary...
if env["devel"]:
   ms_files.extend( Glob("tests/__init__.py") )
   ms_files.extend( Glob("tests/setup.py") )
   ms_files.extend( Glob("tests/debughandler.py") )

# openid
ms_files.extend( Glob("openid/*.py") )
ms_files.extend( Glob("openid/server/*.py") )
ms_files.extend( Glob("openid/extensions/*.py") )
ms_files.extend( Glob("openid/extensions/draft/*.py") )
ms_files.extend( Glob("openid/store/*.py") )
ms_files.extend( Glob("openid/consumer/*.py") )
ms_files.extend( Glob("openid/yadis/*.py") )

# storage
ms_files.extend( Glob("storage/*.py") )
ms_files.extend( Glob("storage/backends/*.py") )

# MS
ms_files.extend( Glob("MS/*.py") )
ms_files.extend( Glob("MS/methods/*.py") )

# common MS files
ms_files.extend( Glob("common/*.py") )

pypb_cmds = []
for pypb in protobuf_py_files:
   # replace all instances of "google." with "googlepb.", so we can use them in GAE (since there's a conflicting incompatible protobufs package)
   cmd = env.Command( "protobufs/%s" % (os.path.basename(pypb.path)), "#" + pypb.path, "echo '# AUTOMATICALLY GENERATED BY SCons.  DO NOT EDIT' > $TARGET; cat $SOURCE | sed 's/google\./googlepb\./g' >> $TARGET" )
   pypb_cmds.append( cmd )

lib_cmds = []
for common_file in common_files:
   # put common files in place
   cmd = env.Command( "lib/python/syndicate/common/%s" % (os.path.basename(common_file.path)), "#" + common_file.path, Copy( "$TARGET", "$SOURCE" ) )
   lib_cmds.append( cmd )

for pypb in protobuf_py_files:
   # copy protobuf files...
   cmd = env.Command( "lib/python/syndicate/protobufs/%s" % (os.path.basename(pypb.path)), "#" + pypb.path, Copy( "$TARGET", "$SOURCE" ) )
   lib_cmds.append( cmd )

for protobuf_util_file in protobuf_util:
   # copy protobuf util file
   cmd = env.Command( "lib/python/syndicate/protobufs/%s" % (os.path.basename(protobuf_util_file.path)), "#" + protobuf_util_file.path, Copy( "$TARGET", "$SOURCE" ) )
   lib_cmds.append( cmd )

client_cmds = []
for client_file in client_files:
   # put client files in place
   if client_file.path.endswith( TOOL_BIN ):
      cmd = env.Command( "bin/%s" % TOOL_BIN, "#" + client_file.path, Move( "$TARGET", "$SOURCE" ) )
      client_cmds.append( cmd )

   else:
      cmd = env.Command( "lib/python/syndicate/%s" % (os.path.basename(client_file.path)), "#" + client_file.path, Copy( "$TARGET", "$SOURCE" ) )
      lib_cmds.append( cmd )

ms = ms_files + pypb_cmds

Return( 'ms lib_cmds client_cmds' )
