"""
   Copyright 2013 The Trustees of Princeton University

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

# build UGs
import os

# source files common to all UGs
common_source_files = """
   consistency.cpp
   driver.cpp
   log.cpp
   replication.cpp
   stats.cpp
   syndicate.cpp
   network.cpp
   vacuumer.cpp
"""

# HTTP backend
server_source_files = """
   http-common.cpp
   server.cpp
"""

# FUSE-specific files
syndicatefs_source = """
   syndicatefs.cpp
"""

# HTTP daemon files
syndicate_httpd_source = """
   syndicate-httpd.cpp
"""

# HDFS files
syndicate_ipc_source = """
   syndicate-ipc.cpp
"""

# client library files
syndicate_client_source = """
   client.cpp
"""

# source search paths
CPPPATH = """
   fs/
   #
   #build/out/protobufs/
   /usr/local/include/libsyndicate
"""

# library search paths
LIBPATH = """
   #build/out/lib/libsyndicate/
"""

# common libraries
LIBS_COMMON = """
   curl
   pthread
   syndicate
   protobuf
   rt
   dl
"""

LIBS_FS = """
   fuse
"""

LIBS_IPC = """
   boost_thread
   boost_system
"""

LIBS_IPC_OLD_BOOST = """
   boost_system
"""

LIBS_HTTPD = """
   gnutls
   microhttpd
"""

# add additional CPPFLAGS here
CPPFLAGS = ""

# add additional CPPDEFINES here
CPPDEFINES = [
   ("_FILE_OFFSET_BITS", 64),
   "_REENTRANT",
   "_THREAD_SAFE"
]

# get our environment
Import('env')
Import("extra_args")

env = env.Clone()
env.Append(LIBPATH = Split(LIBPATH))
env.Append(CPPPATH = Split(CPPPATH))
env.Append(CPPFLAGS = Split(CPPFLAGS))
env.Append(CPPDEFINES = CPPDEFINES)

# if we're using an old Boost library (like on PlanetLab, switch the library flags)
if env['old_boost']:
   LIBS_IPC = LIBS_IPC_OLD_BOOST

def create_objs(SRCS, path="", this_env=None):
   if this_env is None:
      this_env=env
   return [this_env.Object(path+src) for src in SRCS]

def create_sobjs(SRCS, path="", this_env=None):
   if this_env is None:
      this_env=env
   return [this_env.SharedObject(path+src) for src in SRCS]

syndicate_common_src = Split(common_source_files)
syndicate_common_objs = [env.Object( "%s.o" % x, x ) for x in syndicate_common_src]
syndicate_common_sobjs = [env.SharedObject( "%s.so" % x, x ) for x in syndicate_common_src]

fs_objs, fs_sobjs = SConscript("fs/SConscript")

common = [syndicate_common_objs, fs_objs]
shared_common = [syndicate_common_sobjs, fs_sobjs]
server = create_objs( Split(server_source_files) )
shared_server = create_sobjs( Split(server_source_files) )

common_full = common + server
shared_common_full = shared_common + shared_server

syndicatefs = env.Program("syndicatefs", common_full + create_objs( Split(syndicatefs_source) ), LIBS=Split(LIBS_COMMON + LIBS_FS) )
syndicate_httpd = env.Program("syndicate-httpd", common_full + create_objs( Split(syndicate_httpd_source) ), LIBS=Split(LIBS_COMMON + LIBS_HTTPD) )
syndicate_ipc = env.Program("syndicate-ipc", common_full + create_objs( Split(syndicate_ipc_source) ), LIBS=Split(LIBS_COMMON + LIBS_IPC) )
syndicate_client_lib = env.SharedLibrary( "libsyndicateUGclient.so", shared_common + create_sobjs( Split(syndicate_client_source) ), LIBS=Split(LIBS_COMMON))
syndicate_full_UG_lib = env.SharedLibrary( "libsyndicateUG.so", shared_common_full + create_sobjs( Split(syndicate_client_source) ), LIBS=Split(LIBS_COMMON))

syndicate_client_lib_headers = Glob("*.h")
syndicate_client_lib_fs_headers = Glob("fs/*.h")
syndicate_watchdog = Glob("syndicate-ug")

Return( 'syndicatefs syndicate_httpd syndicate_ipc syndicate_client_lib syndicate_full_UG_lib syndicate_client_lib_headers syndicate_client_lib_fs_headers syndicate_watchdog' )

