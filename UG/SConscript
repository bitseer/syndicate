"""
   Copyright 2013 The Trustees of Princeton University

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

# build UGs

# add additional source files here
common_source_files = """
   collator.cpp
   http-common.cpp
   log.cpp
   replication.cpp
   stats.cpp
   syndicate.cpp
"""

syndicatefs_source = "syndicatefs.cpp"
syndicate_httpd_source = "syndicate-httpd.cpp"
syndicate_ipc_source = "syndicate-ipc.cpp"

# add source file search paths here
CPPPATH = """
   fs/
   #libsyndicate/
   #build/out/protobufs/
   /usr/include/syndicate
"""

# add library paths here
LIBPATH = """
   #build/out/libsyndicate/
"""

# add libraries here
LIBS_COMMON = """
   curl
   pthread
   crypto
   microhttpd
   syndicate
   protobuf
   gnutls
"""

LIBS_FS = """
   fuse
"""

LIBS_IPC = """
   boost_thread
   boost_system
"""

LIBS_HTTPD = """
"""

# add additional CPPFLAGS here
CPPFLAGS = ""

# add additional CPPDEFINES here
CPPDEFINES = [
   ("_FILE_OFFSET_BITS", 64),
   "_REENTRANT",
   "_THREAD_SAFE"
]

# get our environment
Import('env')
env = env.Clone()

env.Append(LIBPATH = Split(LIBPATH))
env.Append(CPPPATH = Split(CPPPATH))
env.Append(CPPFLAGS = Split(CPPFLAGS))
env.Append(CPPDEFINES = CPPDEFINES)

env_ipc = env.Clone()
env_ipc.Append(LIBS = Split(LIBS_COMMON + LIBS_IPC))

env_httpd = env.Clone()
env_httpd.Append(LIBS = Split(LIBS_COMMON + LIBS_HTTPD))

env.Append(LIBS = Split(LIBS_COMMON + LIBS_FS))

# build fs
fs_objs = SConscript("fs/SConscript")

# build syndicate
syndicate_common_objs = env.Object( source=Split(common_source_files) )
syndicatefs_obj = env.Object( source=Split(syndicatefs_source) )
syndicate_httpd_obj = env_httpd.Object( source=Split(syndicate_httpd_source) )

syndicatefs = env.Program("syndicatefs", source=[syndicate_common_objs, fs_objs, syndicatefs_obj] )

syndicate_httpd = env_httpd.Program("syndicate-httpd", source=[syndicate_common_objs, fs_objs, syndicate_httpd_obj] )

syndicate_ipc_obj = env_ipc.Object( source=Split(syndicate_ipc_source) )
syndicate_ipc = env_ipc.Program("syndicate-ipc", source=[syndicate_common_objs, fs_objs, syndicate_ipc_obj] )

Return( 'syndicatefs syndicate_httpd syndicate_ipc' )
