// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ms.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ms {

namespace {

const ::google::protobuf::Descriptor* ms_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ms_entry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ms_entry_FileType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ms_update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ms_update_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ms_update_UpdateType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ms_updates_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ms_updates_reflection_ = NULL;
const ::google::protobuf::Descriptor* ms_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ms_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ms_gateway_blockinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ms_gateway_blockinfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ms_gateway_blockinfo_ProgressType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ms_volume_gateway_cred_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ms_volume_gateway_cred_reflection_ = NULL;
const ::google::protobuf::Descriptor* ms_volume_metadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ms_volume_metadata_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ms_2eproto() {
  protobuf_AddDesc_ms_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ms.proto");
  GOOGLE_CHECK(file != NULL);
  ms_entry_descriptor_ = file->message_type(0);
  static const int ms_entry_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_entry, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_entry, ctime_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_entry, ctime_nsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_entry, mtime_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_entry, mtime_nsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_entry, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_entry, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_entry, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_entry, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_entry, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_entry, max_read_freshness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_entry, max_write_freshness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_entry, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_entry, url_),
  };
  ms_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ms_entry_descriptor_,
      ms_entry::default_instance_,
      ms_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ms_entry));
  ms_entry_FileType_descriptor_ = ms_entry_descriptor_->enum_type(0);
  ms_update_descriptor_ = file->message_type(1);
  static const int ms_update_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_update, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_update, entry_),
  };
  ms_update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ms_update_descriptor_,
      ms_update::default_instance_,
      ms_update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ms_update));
  ms_update_UpdateType_descriptor_ = ms_update_descriptor_->enum_type(0);
  ms_updates_descriptor_ = file->message_type(2);
  static const int ms_updates_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_updates, updates_),
  };
  ms_updates_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ms_updates_descriptor_,
      ms_updates::default_instance_,
      ms_updates_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_updates, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_updates, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ms_updates));
  ms_reply_descriptor_ = file->message_type(3);
  static const int ms_reply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_reply, volume_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_reply, entries_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_reply, entries_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_reply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_reply, errormsg_),
  };
  ms_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ms_reply_descriptor_,
      ms_reply::default_instance_,
      ms_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ms_reply));
  ms_gateway_blockinfo_descriptor_ = file->message_type(4);
  static const int ms_gateway_blockinfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_gateway_blockinfo, fs_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_gateway_blockinfo, file_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_gateway_blockinfo, block_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_gateway_blockinfo, block_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_gateway_blockinfo, blocking_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_gateway_blockinfo, file_mtime_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_gateway_blockinfo, file_mtime_nsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_gateway_blockinfo, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_gateway_blockinfo, write_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_gateway_blockinfo, session_id_),
  };
  ms_gateway_blockinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ms_gateway_blockinfo_descriptor_,
      ms_gateway_blockinfo::default_instance_,
      ms_gateway_blockinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_gateway_blockinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_gateway_blockinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ms_gateway_blockinfo));
  ms_gateway_blockinfo_ProgressType_descriptor_ = ms_gateway_blockinfo_descriptor_->enum_type(0);
  ms_volume_gateway_cred_descriptor_ = file->message_type(5);
  static const int ms_volume_gateway_cred_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_volume_gateway_cred, owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_volume_gateway_cred, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_volume_gateway_cred, password_hash_),
  };
  ms_volume_gateway_cred_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ms_volume_gateway_cred_descriptor_,
      ms_volume_gateway_cred::default_instance_,
      ms_volume_gateway_cred_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_volume_gateway_cred, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_volume_gateway_cred, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ms_volume_gateway_cred));
  ms_volume_metadata_descriptor_ = file->message_type(6);
  static const int ms_volume_metadata_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_volume_metadata, blocksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_volume_metadata, requester_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_volume_metadata, owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_volume_metadata, volume_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_volume_metadata, volume_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_volume_metadata, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_volume_metadata, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_volume_metadata, replica_urls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_volume_metadata, user_gateway_creds_),
  };
  ms_volume_metadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ms_volume_metadata_descriptor_,
      ms_volume_metadata::default_instance_,
      ms_volume_metadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_volume_metadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ms_volume_metadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ms_volume_metadata));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ms_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ms_entry_descriptor_, &ms_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ms_update_descriptor_, &ms_update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ms_updates_descriptor_, &ms_updates::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ms_reply_descriptor_, &ms_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ms_gateway_blockinfo_descriptor_, &ms_gateway_blockinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ms_volume_gateway_cred_descriptor_, &ms_volume_gateway_cred::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ms_volume_metadata_descriptor_, &ms_volume_metadata::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ms_2eproto() {
  delete ms_entry::default_instance_;
  delete ms_entry_reflection_;
  delete ms_update::default_instance_;
  delete ms_update_reflection_;
  delete ms_updates::default_instance_;
  delete ms_updates_reflection_;
  delete ms_reply::default_instance_;
  delete ms_reply_reflection_;
  delete ms_gateway_blockinfo::default_instance_;
  delete ms_gateway_blockinfo_reflection_;
  delete ms_volume_gateway_cred::default_instance_;
  delete ms_volume_gateway_cred_reflection_;
  delete ms_volume_metadata::default_instance_;
  delete ms_volume_metadata_reflection_;
}

void protobuf_AddDesc_ms_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010ms.proto\022\002ms\"\301\002\n\010ms_entry\022\014\n\004type\030\001 \002("
    "\005\022\021\n\tctime_sec\030\002 \002(\003\022\022\n\nctime_nsec\030\003 \002(\003"
    "\022\021\n\tmtime_sec\030\004 \002(\003\022\022\n\nmtime_nsec\030\005 \002(\005\022"
    "\r\n\005owner\030\006 \002(\005\022\016\n\006volume\030\007 \002(\005\022\014\n\004mode\030\010"
    " \002(\005\022\014\n\004size\030\t \002(\004\022\017\n\007version\030\n \002(\003\022\032\n\022m"
    "ax_read_freshness\030\013 \002(\005\022\033\n\023max_write_fre"
    "shness\030\014 \002(\005\022\014\n\004path\030\r \002(\t\022\013\n\003url\030\016 \002(\t\""
    "9\n\010FileType\022\026\n\022MS_ENTRY_TYPE_FILE\020\001\022\025\n\021M"
    "S_ENTRY_TYPE_DIR\020\002\"h\n\tms_update\022\014\n\004type\030"
    "\001 \002(\005\022\033\n\005entry\030\002 \002(\0132\014.ms.ms_entry\"0\n\nUp"
    "dateType\022\n\n\006CREATE\020\001\022\n\n\006UPDATE\020\002\022\n\n\006DELE"
    "TE\020\003\",\n\nms_updates\022\036\n\007updates\030\001 \003(\0132\r.ms"
    ".ms_update\"\212\001\n\010ms_reply\022\026\n\016volume_versio"
    "n\030\001 \002(\003\022!\n\013entries_dir\030\002 \003(\0132\014.ms.ms_ent"
    "ry\022\"\n\014entries_base\030\003 \003(\0132\014.ms.ms_entry\022\r"
    "\n\005error\030\004 \002(\005\022\020\n\010errormsg\030\005 \001(\t\"\226\002\n\024ms_g"
    "ateway_blockinfo\022\017\n\007fs_path\030\n \002(\t\022\024\n\014fil"
    "e_version\030\001 \002(\003\022\020\n\010block_id\030\002 \002(\004\022\025\n\rblo"
    "ck_version\030\003 \002(\003\022\027\n\017blocking_factor\030\004 \002("
    "\004\022\026\n\016file_mtime_sec\030\005 \002(\003\022\027\n\017file_mtime_"
    "nsec\030\006 \002(\005\022\020\n\010progress\030\007 \001(\005\022\022\n\nwrite_ti"
    "me\030\010 \001(\003\022\022\n\nsession_id\030\t \001(\003\"*\n\014Progress"
    "Type\022\013\n\007STARTED\020\001\022\r\n\tCOMMITTED\020\002\"S\n\026ms_v"
    "olume_gateway_cred\022\020\n\010owner_id\030\001 \002(\005\022\020\n\010"
    "username\030\002 \002(\t\022\025\n\rpassword_hash\030\003 \002(\t\"\353\001"
    "\n\022ms_volume_metadata\022\021\n\tblocksize\030\001 \002(\004\022"
    "\024\n\014requester_id\030\002 \002(\004\022\020\n\010owner_id\030\003 \002(\004\022"
    "\021\n\tvolume_id\030\004 \002(\004\022\026\n\016volume_version\030\005 \002"
    "(\004\022\014\n\004name\030\006 \002(\t\022\023\n\013description\030\007 \002(\t\022\024\n"
    "\014replica_urls\030\010 \003(\t\0226\n\022user_gateway_cred"
    "s\030\t \003(\0132\032.ms.ms_volume_gateway_cred", 1235);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ms.proto", &protobuf_RegisterTypes);
  ms_entry::default_instance_ = new ms_entry();
  ms_update::default_instance_ = new ms_update();
  ms_updates::default_instance_ = new ms_updates();
  ms_reply::default_instance_ = new ms_reply();
  ms_gateway_blockinfo::default_instance_ = new ms_gateway_blockinfo();
  ms_volume_gateway_cred::default_instance_ = new ms_volume_gateway_cred();
  ms_volume_metadata::default_instance_ = new ms_volume_metadata();
  ms_entry::default_instance_->InitAsDefaultInstance();
  ms_update::default_instance_->InitAsDefaultInstance();
  ms_updates::default_instance_->InitAsDefaultInstance();
  ms_reply::default_instance_->InitAsDefaultInstance();
  ms_gateway_blockinfo::default_instance_->InitAsDefaultInstance();
  ms_volume_gateway_cred::default_instance_->InitAsDefaultInstance();
  ms_volume_metadata::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ms_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ms_2eproto {
  StaticDescriptorInitializer_ms_2eproto() {
    protobuf_AddDesc_ms_2eproto();
  }
} static_descriptor_initializer_ms_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* ms_entry_FileType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ms_entry_FileType_descriptor_;
}
bool ms_entry_FileType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ms_entry_FileType ms_entry::MS_ENTRY_TYPE_FILE;
const ms_entry_FileType ms_entry::MS_ENTRY_TYPE_DIR;
const ms_entry_FileType ms_entry::FileType_MIN;
const ms_entry_FileType ms_entry::FileType_MAX;
const int ms_entry::FileType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ms_entry::kTypeFieldNumber;
const int ms_entry::kCtimeSecFieldNumber;
const int ms_entry::kCtimeNsecFieldNumber;
const int ms_entry::kMtimeSecFieldNumber;
const int ms_entry::kMtimeNsecFieldNumber;
const int ms_entry::kOwnerFieldNumber;
const int ms_entry::kVolumeFieldNumber;
const int ms_entry::kModeFieldNumber;
const int ms_entry::kSizeFieldNumber;
const int ms_entry::kVersionFieldNumber;
const int ms_entry::kMaxReadFreshnessFieldNumber;
const int ms_entry::kMaxWriteFreshnessFieldNumber;
const int ms_entry::kPathFieldNumber;
const int ms_entry::kUrlFieldNumber;
#endif  // !_MSC_VER

ms_entry::ms_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ms_entry::InitAsDefaultInstance() {
}

ms_entry::ms_entry(const ms_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ms_entry::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ctime_sec_ = GOOGLE_LONGLONG(0);
  ctime_nsec_ = GOOGLE_LONGLONG(0);
  mtime_sec_ = GOOGLE_LONGLONG(0);
  mtime_nsec_ = 0;
  owner_ = 0;
  volume_ = 0;
  mode_ = 0;
  size_ = GOOGLE_ULONGLONG(0);
  version_ = GOOGLE_LONGLONG(0);
  max_read_freshness_ = 0;
  max_write_freshness_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ms_entry::~ms_entry() {
  SharedDtor();
}

void ms_entry::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void ms_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ms_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ms_entry_descriptor_;
}

const ms_entry& ms_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ms_2eproto();  return *default_instance_;
}

ms_entry* ms_entry::default_instance_ = NULL;

ms_entry* ms_entry::New() const {
  return new ms_entry;
}

void ms_entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    ctime_sec_ = GOOGLE_LONGLONG(0);
    ctime_nsec_ = GOOGLE_LONGLONG(0);
    mtime_sec_ = GOOGLE_LONGLONG(0);
    mtime_nsec_ = 0;
    owner_ = 0;
    volume_ = 0;
    mode_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    size_ = GOOGLE_ULONGLONG(0);
    version_ = GOOGLE_LONGLONG(0);
    max_read_freshness_ = 0;
    max_write_freshness_ = 0;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ms_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ctime_sec;
        break;
      }
      
      // required int64 ctime_sec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctime_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ctime_sec_)));
          set_has_ctime_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ctime_nsec;
        break;
      }
      
      // required int64 ctime_nsec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctime_nsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ctime_nsec_)));
          set_has_ctime_nsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mtime_sec;
        break;
      }
      
      // required int64 mtime_sec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mtime_sec_)));
          set_has_mtime_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mtime_nsec;
        break;
      }
      
      // required int32 mtime_nsec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime_nsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mtime_nsec_)));
          set_has_mtime_nsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_owner;
        break;
      }
      
      // required int32 owner = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_volume;
        break;
      }
      
      // required int32 volume = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_mode;
        break;
      }
      
      // required int32 mode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_size;
        break;
      }
      
      // required uint64 size = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_version;
        break;
      }
      
      // required int64 version = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_max_read_freshness;
        break;
      }
      
      // required int32 max_read_freshness = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_read_freshness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_read_freshness_)));
          set_has_max_read_freshness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_max_write_freshness;
        break;
      }
      
      // required int32 max_write_freshness = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_write_freshness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_write_freshness_)));
          set_has_max_write_freshness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_path;
        break;
      }
      
      // required string path = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_url;
        break;
      }
      
      // required string url = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ms_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required int64 ctime_sec = 2;
  if (has_ctime_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ctime_sec(), output);
  }
  
  // required int64 ctime_nsec = 3;
  if (has_ctime_nsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ctime_nsec(), output);
  }
  
  // required int64 mtime_sec = 4;
  if (has_mtime_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->mtime_sec(), output);
  }
  
  // required int32 mtime_nsec = 5;
  if (has_mtime_nsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mtime_nsec(), output);
  }
  
  // required int32 owner = 6;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->owner(), output);
  }
  
  // required int32 volume = 7;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->volume(), output);
  }
  
  // required int32 mode = 8;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mode(), output);
  }
  
  // required uint64 size = 9;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->size(), output);
  }
  
  // required int64 version = 10;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->version(), output);
  }
  
  // required int32 max_read_freshness = 11;
  if (has_max_read_freshness()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->max_read_freshness(), output);
  }
  
  // required int32 max_write_freshness = 12;
  if (has_max_write_freshness()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->max_write_freshness(), output);
  }
  
  // required string path = 13;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->path(), output);
  }
  
  // required string url = 14;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->url(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ms_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required int64 ctime_sec = 2;
  if (has_ctime_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ctime_sec(), target);
  }
  
  // required int64 ctime_nsec = 3;
  if (has_ctime_nsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ctime_nsec(), target);
  }
  
  // required int64 mtime_sec = 4;
  if (has_mtime_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->mtime_sec(), target);
  }
  
  // required int32 mtime_nsec = 5;
  if (has_mtime_nsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mtime_nsec(), target);
  }
  
  // required int32 owner = 6;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->owner(), target);
  }
  
  // required int32 volume = 7;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->volume(), target);
  }
  
  // required int32 mode = 8;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mode(), target);
  }
  
  // required uint64 size = 9;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->size(), target);
  }
  
  // required int64 version = 10;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->version(), target);
  }
  
  // required int32 max_read_freshness = 11;
  if (has_max_read_freshness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->max_read_freshness(), target);
  }
  
  // required int32 max_write_freshness = 12;
  if (has_max_write_freshness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->max_write_freshness(), target);
  }
  
  // required string path = 13;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->path(), target);
  }
  
  // required string url = 14;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->url(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ms_entry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int64 ctime_sec = 2;
    if (has_ctime_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ctime_sec());
    }
    
    // required int64 ctime_nsec = 3;
    if (has_ctime_nsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ctime_nsec());
    }
    
    // required int64 mtime_sec = 4;
    if (has_mtime_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mtime_sec());
    }
    
    // required int32 mtime_nsec = 5;
    if (has_mtime_nsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mtime_nsec());
    }
    
    // required int32 owner = 6;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->owner());
    }
    
    // required int32 volume = 7;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }
    
    // required int32 mode = 8;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 size = 9;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }
    
    // required int64 version = 10;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->version());
    }
    
    // required int32 max_read_freshness = 11;
    if (has_max_read_freshness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_read_freshness());
    }
    
    // required int32 max_write_freshness = 12;
    if (has_max_write_freshness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_write_freshness());
    }
    
    // required string path = 13;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // required string url = 14;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ms_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ms_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ms_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ms_entry::MergeFrom(const ms_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ctime_sec()) {
      set_ctime_sec(from.ctime_sec());
    }
    if (from.has_ctime_nsec()) {
      set_ctime_nsec(from.ctime_nsec());
    }
    if (from.has_mtime_sec()) {
      set_mtime_sec(from.mtime_sec());
    }
    if (from.has_mtime_nsec()) {
      set_mtime_nsec(from.mtime_nsec());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_max_read_freshness()) {
      set_max_read_freshness(from.max_read_freshness());
    }
    if (from.has_max_write_freshness()) {
      set_max_write_freshness(from.max_write_freshness());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ms_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ms_entry::CopyFrom(const ms_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ms_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;
  
  return true;
}

void ms_entry::Swap(ms_entry* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(ctime_sec_, other->ctime_sec_);
    std::swap(ctime_nsec_, other->ctime_nsec_);
    std::swap(mtime_sec_, other->mtime_sec_);
    std::swap(mtime_nsec_, other->mtime_nsec_);
    std::swap(owner_, other->owner_);
    std::swap(volume_, other->volume_);
    std::swap(mode_, other->mode_);
    std::swap(size_, other->size_);
    std::swap(version_, other->version_);
    std::swap(max_read_freshness_, other->max_read_freshness_);
    std::swap(max_write_freshness_, other->max_write_freshness_);
    std::swap(path_, other->path_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ms_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ms_entry_descriptor_;
  metadata.reflection = ms_entry_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ms_update_UpdateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ms_update_UpdateType_descriptor_;
}
bool ms_update_UpdateType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ms_update_UpdateType ms_update::CREATE;
const ms_update_UpdateType ms_update::UPDATE;
const ms_update_UpdateType ms_update::DELETE;
const ms_update_UpdateType ms_update::UpdateType_MIN;
const ms_update_UpdateType ms_update::UpdateType_MAX;
const int ms_update::UpdateType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ms_update::kTypeFieldNumber;
const int ms_update::kEntryFieldNumber;
#endif  // !_MSC_VER

ms_update::ms_update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ms_update::InitAsDefaultInstance() {
  entry_ = const_cast< ::ms::ms_entry*>(&::ms::ms_entry::default_instance());
}

ms_update::ms_update(const ms_update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ms_update::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  entry_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ms_update::~ms_update() {
  SharedDtor();
}

void ms_update::SharedDtor() {
  if (this != default_instance_) {
    delete entry_;
  }
}

void ms_update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ms_update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ms_update_descriptor_;
}

const ms_update& ms_update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ms_2eproto();  return *default_instance_;
}

ms_update* ms_update::default_instance_ = NULL;

ms_update* ms_update::New() const {
  return new ms_update;
}

void ms_update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_entry()) {
      if (entry_ != NULL) entry_->::ms::ms_entry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ms_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entry;
        break;
      }
      
      // required .ms.ms_entry entry = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ms_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required .ms.ms_entry entry = 2;
  if (has_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entry(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ms_update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required .ms.ms_entry entry = 2;
  if (has_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entry(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ms_update::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required .ms.ms_entry entry = 2;
    if (has_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entry());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ms_update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ms_update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ms_update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ms_update::MergeFrom(const ms_update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_entry()) {
      mutable_entry()->::ms::ms_entry::MergeFrom(from.entry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ms_update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ms_update::CopyFrom(const ms_update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ms_update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_entry()) {
    if (!this->entry().IsInitialized()) return false;
  }
  return true;
}

void ms_update::Swap(ms_update* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(entry_, other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ms_update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ms_update_descriptor_;
  metadata.reflection = ms_update_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ms_updates::kUpdatesFieldNumber;
#endif  // !_MSC_VER

ms_updates::ms_updates()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ms_updates::InitAsDefaultInstance() {
}

ms_updates::ms_updates(const ms_updates& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ms_updates::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ms_updates::~ms_updates() {
  SharedDtor();
}

void ms_updates::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ms_updates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ms_updates::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ms_updates_descriptor_;
}

const ms_updates& ms_updates::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ms_2eproto();  return *default_instance_;
}

ms_updates* ms_updates::default_instance_ = NULL;

ms_updates* ms_updates::New() const {
  return new ms_updates;
}

void ms_updates::Clear() {
  updates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ms_updates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ms.ms_update updates = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_updates;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ms_updates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ms.ms_update updates = 1;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->updates(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ms_updates::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ms.ms_update updates = 1;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->updates(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ms_updates::ByteSize() const {
  int total_size = 0;
  
  // repeated .ms.ms_update updates = 1;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ms_updates::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ms_updates* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ms_updates*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ms_updates::MergeFrom(const ms_updates& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ms_updates::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ms_updates::CopyFrom(const ms_updates& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ms_updates::IsInitialized() const {
  
  for (int i = 0; i < updates_size(); i++) {
    if (!this->updates(i).IsInitialized()) return false;
  }
  return true;
}

void ms_updates::Swap(ms_updates* other) {
  if (other != this) {
    updates_.Swap(&other->updates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ms_updates::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ms_updates_descriptor_;
  metadata.reflection = ms_updates_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ms_reply::kVolumeVersionFieldNumber;
const int ms_reply::kEntriesDirFieldNumber;
const int ms_reply::kEntriesBaseFieldNumber;
const int ms_reply::kErrorFieldNumber;
const int ms_reply::kErrormsgFieldNumber;
#endif  // !_MSC_VER

ms_reply::ms_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ms_reply::InitAsDefaultInstance() {
}

ms_reply::ms_reply(const ms_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ms_reply::SharedCtor() {
  _cached_size_ = 0;
  volume_version_ = GOOGLE_LONGLONG(0);
  error_ = 0;
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ms_reply::~ms_reply() {
  SharedDtor();
}

void ms_reply::SharedDtor() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (this != default_instance_) {
  }
}

void ms_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ms_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ms_reply_descriptor_;
}

const ms_reply& ms_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ms_2eproto();  return *default_instance_;
}

ms_reply* ms_reply::default_instance_ = NULL;

ms_reply* ms_reply::New() const {
  return new ms_reply;
}

void ms_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    volume_version_ = GOOGLE_LONGLONG(0);
    error_ = 0;
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
  }
  entries_dir_.Clear();
  entries_base_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ms_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 volume_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_version_)));
          set_has_volume_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entries_dir;
        break;
      }
      
      // repeated .ms.ms_entry entries_dir = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entries_dir;
        if (input->ExpectTag(26)) goto parse_entries_base;
        break;
      }
      
      // repeated .ms.ms_entry entries_base = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entries_base;
        if (input->ExpectTag(32)) goto parse_error;
        break;
      }
      
      // required int32 error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_errormsg;
        break;
      }
      
      // optional string errormsg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errormsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ms_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 volume_version = 1;
  if (has_volume_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->volume_version(), output);
  }
  
  // repeated .ms.ms_entry entries_dir = 2;
  for (int i = 0; i < this->entries_dir_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entries_dir(i), output);
  }
  
  // repeated .ms.ms_entry entries_base = 3;
  for (int i = 0; i < this->entries_base_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entries_base(i), output);
  }
  
  // required int32 error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->error(), output);
  }
  
  // optional string errormsg = 5;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->errormsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ms_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 volume_version = 1;
  if (has_volume_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->volume_version(), target);
  }
  
  // repeated .ms.ms_entry entries_dir = 2;
  for (int i = 0; i < this->entries_dir_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entries_dir(i), target);
  }
  
  // repeated .ms.ms_entry entries_base = 3;
  for (int i = 0; i < this->entries_base_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->entries_base(i), target);
  }
  
  // required int32 error = 4;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->error(), target);
  }
  
  // optional string errormsg = 5;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->errormsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ms_reply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 volume_version = 1;
    if (has_volume_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->volume_version());
    }
    
    // required int32 error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }
    
    // optional string errormsg = 5;
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }
    
  }
  // repeated .ms.ms_entry entries_dir = 2;
  total_size += 1 * this->entries_dir_size();
  for (int i = 0; i < this->entries_dir_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries_dir(i));
  }
  
  // repeated .ms.ms_entry entries_base = 3;
  total_size += 1 * this->entries_base_size();
  for (int i = 0; i < this->entries_base_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries_base(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ms_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ms_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ms_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ms_reply::MergeFrom(const ms_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_dir_.MergeFrom(from.entries_dir_);
  entries_base_.MergeFrom(from.entries_base_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume_version()) {
      set_volume_version(from.volume_version());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ms_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ms_reply::CopyFrom(const ms_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ms_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  
  for (int i = 0; i < entries_dir_size(); i++) {
    if (!this->entries_dir(i).IsInitialized()) return false;
  }
  for (int i = 0; i < entries_base_size(); i++) {
    if (!this->entries_base(i).IsInitialized()) return false;
  }
  return true;
}

void ms_reply::Swap(ms_reply* other) {
  if (other != this) {
    std::swap(volume_version_, other->volume_version_);
    entries_dir_.Swap(&other->entries_dir_);
    entries_base_.Swap(&other->entries_base_);
    std::swap(error_, other->error_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ms_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ms_reply_descriptor_;
  metadata.reflection = ms_reply_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ms_gateway_blockinfo_ProgressType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ms_gateway_blockinfo_ProgressType_descriptor_;
}
bool ms_gateway_blockinfo_ProgressType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ms_gateway_blockinfo_ProgressType ms_gateway_blockinfo::STARTED;
const ms_gateway_blockinfo_ProgressType ms_gateway_blockinfo::COMMITTED;
const ms_gateway_blockinfo_ProgressType ms_gateway_blockinfo::ProgressType_MIN;
const ms_gateway_blockinfo_ProgressType ms_gateway_blockinfo::ProgressType_MAX;
const int ms_gateway_blockinfo::ProgressType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ms_gateway_blockinfo::kFsPathFieldNumber;
const int ms_gateway_blockinfo::kFileVersionFieldNumber;
const int ms_gateway_blockinfo::kBlockIdFieldNumber;
const int ms_gateway_blockinfo::kBlockVersionFieldNumber;
const int ms_gateway_blockinfo::kBlockingFactorFieldNumber;
const int ms_gateway_blockinfo::kFileMtimeSecFieldNumber;
const int ms_gateway_blockinfo::kFileMtimeNsecFieldNumber;
const int ms_gateway_blockinfo::kProgressFieldNumber;
const int ms_gateway_blockinfo::kWriteTimeFieldNumber;
const int ms_gateway_blockinfo::kSessionIdFieldNumber;
#endif  // !_MSC_VER

ms_gateway_blockinfo::ms_gateway_blockinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ms_gateway_blockinfo::InitAsDefaultInstance() {
}

ms_gateway_blockinfo::ms_gateway_blockinfo(const ms_gateway_blockinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ms_gateway_blockinfo::SharedCtor() {
  _cached_size_ = 0;
  fs_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_version_ = GOOGLE_LONGLONG(0);
  block_id_ = GOOGLE_ULONGLONG(0);
  block_version_ = GOOGLE_LONGLONG(0);
  blocking_factor_ = GOOGLE_ULONGLONG(0);
  file_mtime_sec_ = GOOGLE_LONGLONG(0);
  file_mtime_nsec_ = 0;
  progress_ = 0;
  write_time_ = GOOGLE_LONGLONG(0);
  session_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ms_gateway_blockinfo::~ms_gateway_blockinfo() {
  SharedDtor();
}

void ms_gateway_blockinfo::SharedDtor() {
  if (fs_path_ != &::google::protobuf::internal::kEmptyString) {
    delete fs_path_;
  }
  if (this != default_instance_) {
  }
}

void ms_gateway_blockinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ms_gateway_blockinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ms_gateway_blockinfo_descriptor_;
}

const ms_gateway_blockinfo& ms_gateway_blockinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ms_2eproto();  return *default_instance_;
}

ms_gateway_blockinfo* ms_gateway_blockinfo::default_instance_ = NULL;

ms_gateway_blockinfo* ms_gateway_blockinfo::New() const {
  return new ms_gateway_blockinfo;
}

void ms_gateway_blockinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fs_path()) {
      if (fs_path_ != &::google::protobuf::internal::kEmptyString) {
        fs_path_->clear();
      }
    }
    file_version_ = GOOGLE_LONGLONG(0);
    block_id_ = GOOGLE_ULONGLONG(0);
    block_version_ = GOOGLE_LONGLONG(0);
    blocking_factor_ = GOOGLE_ULONGLONG(0);
    file_mtime_sec_ = GOOGLE_LONGLONG(0);
    file_mtime_nsec_ = 0;
    progress_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    write_time_ = GOOGLE_LONGLONG(0);
    session_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ms_gateway_blockinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 file_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_version_)));
          set_has_file_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_block_id;
        break;
      }
      
      // required uint64 block_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &block_id_)));
          set_has_block_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_block_version;
        break;
      }
      
      // required int64 block_version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &block_version_)));
          set_has_block_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_blocking_factor;
        break;
      }
      
      // required uint64 blocking_factor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blocking_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blocking_factor_)));
          set_has_blocking_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_file_mtime_sec;
        break;
      }
      
      // required int64 file_mtime_sec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_mtime_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_mtime_sec_)));
          set_has_file_mtime_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_file_mtime_nsec;
        break;
      }
      
      // required int32 file_mtime_nsec = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_mtime_nsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_mtime_nsec_)));
          set_has_file_mtime_nsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_progress;
        break;
      }
      
      // optional int32 progress = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_write_time;
        break;
      }
      
      // optional int64 write_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_write_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &write_time_)));
          set_has_write_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_session_id;
        break;
      }
      
      // optional int64 session_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_fs_path;
        break;
      }
      
      // required string fs_path = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fs_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fs_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fs_path().data(), this->fs_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ms_gateway_blockinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 file_version = 1;
  if (has_file_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->file_version(), output);
  }
  
  // required uint64 block_id = 2;
  if (has_block_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->block_id(), output);
  }
  
  // required int64 block_version = 3;
  if (has_block_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->block_version(), output);
  }
  
  // required uint64 blocking_factor = 4;
  if (has_blocking_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->blocking_factor(), output);
  }
  
  // required int64 file_mtime_sec = 5;
  if (has_file_mtime_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->file_mtime_sec(), output);
  }
  
  // required int32 file_mtime_nsec = 6;
  if (has_file_mtime_nsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->file_mtime_nsec(), output);
  }
  
  // optional int32 progress = 7;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->progress(), output);
  }
  
  // optional int64 write_time = 8;
  if (has_write_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->write_time(), output);
  }
  
  // optional int64 session_id = 9;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->session_id(), output);
  }
  
  // required string fs_path = 10;
  if (has_fs_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fs_path().data(), this->fs_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->fs_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ms_gateway_blockinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 file_version = 1;
  if (has_file_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->file_version(), target);
  }
  
  // required uint64 block_id = 2;
  if (has_block_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->block_id(), target);
  }
  
  // required int64 block_version = 3;
  if (has_block_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->block_version(), target);
  }
  
  // required uint64 blocking_factor = 4;
  if (has_blocking_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->blocking_factor(), target);
  }
  
  // required int64 file_mtime_sec = 5;
  if (has_file_mtime_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->file_mtime_sec(), target);
  }
  
  // required int32 file_mtime_nsec = 6;
  if (has_file_mtime_nsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->file_mtime_nsec(), target);
  }
  
  // optional int32 progress = 7;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->progress(), target);
  }
  
  // optional int64 write_time = 8;
  if (has_write_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->write_time(), target);
  }
  
  // optional int64 session_id = 9;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->session_id(), target);
  }
  
  // required string fs_path = 10;
  if (has_fs_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fs_path().data(), this->fs_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->fs_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ms_gateway_blockinfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fs_path = 10;
    if (has_fs_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fs_path());
    }
    
    // required int64 file_version = 1;
    if (has_file_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->file_version());
    }
    
    // required uint64 block_id = 2;
    if (has_block_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->block_id());
    }
    
    // required int64 block_version = 3;
    if (has_block_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->block_version());
    }
    
    // required uint64 blocking_factor = 4;
    if (has_blocking_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->blocking_factor());
    }
    
    // required int64 file_mtime_sec = 5;
    if (has_file_mtime_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->file_mtime_sec());
    }
    
    // required int32 file_mtime_nsec = 6;
    if (has_file_mtime_nsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_mtime_nsec());
    }
    
    // optional int32 progress = 7;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->progress());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 write_time = 8;
    if (has_write_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->write_time());
    }
    
    // optional int64 session_id = 9;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->session_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ms_gateway_blockinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ms_gateway_blockinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ms_gateway_blockinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ms_gateway_blockinfo::MergeFrom(const ms_gateway_blockinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fs_path()) {
      set_fs_path(from.fs_path());
    }
    if (from.has_file_version()) {
      set_file_version(from.file_version());
    }
    if (from.has_block_id()) {
      set_block_id(from.block_id());
    }
    if (from.has_block_version()) {
      set_block_version(from.block_version());
    }
    if (from.has_blocking_factor()) {
      set_blocking_factor(from.blocking_factor());
    }
    if (from.has_file_mtime_sec()) {
      set_file_mtime_sec(from.file_mtime_sec());
    }
    if (from.has_file_mtime_nsec()) {
      set_file_mtime_nsec(from.file_mtime_nsec());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_write_time()) {
      set_write_time(from.write_time());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ms_gateway_blockinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ms_gateway_blockinfo::CopyFrom(const ms_gateway_blockinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ms_gateway_blockinfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void ms_gateway_blockinfo::Swap(ms_gateway_blockinfo* other) {
  if (other != this) {
    std::swap(fs_path_, other->fs_path_);
    std::swap(file_version_, other->file_version_);
    std::swap(block_id_, other->block_id_);
    std::swap(block_version_, other->block_version_);
    std::swap(blocking_factor_, other->blocking_factor_);
    std::swap(file_mtime_sec_, other->file_mtime_sec_);
    std::swap(file_mtime_nsec_, other->file_mtime_nsec_);
    std::swap(progress_, other->progress_);
    std::swap(write_time_, other->write_time_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ms_gateway_blockinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ms_gateway_blockinfo_descriptor_;
  metadata.reflection = ms_gateway_blockinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ms_volume_gateway_cred::kOwnerIdFieldNumber;
const int ms_volume_gateway_cred::kUsernameFieldNumber;
const int ms_volume_gateway_cred::kPasswordHashFieldNumber;
#endif  // !_MSC_VER

ms_volume_gateway_cred::ms_volume_gateway_cred()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ms_volume_gateway_cred::InitAsDefaultInstance() {
}

ms_volume_gateway_cred::ms_volume_gateway_cred(const ms_volume_gateway_cred& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ms_volume_gateway_cred::SharedCtor() {
  _cached_size_ = 0;
  owner_id_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ms_volume_gateway_cred::~ms_volume_gateway_cred() {
  SharedDtor();
}

void ms_volume_gateway_cred::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete password_hash_;
  }
  if (this != default_instance_) {
  }
}

void ms_volume_gateway_cred::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ms_volume_gateway_cred::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ms_volume_gateway_cred_descriptor_;
}

const ms_volume_gateway_cred& ms_volume_gateway_cred::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ms_2eproto();  return *default_instance_;
}

ms_volume_gateway_cred* ms_volume_gateway_cred::default_instance_ = NULL;

ms_volume_gateway_cred* ms_volume_gateway_cred::New() const {
  return new ms_volume_gateway_cred;
}

void ms_volume_gateway_cred::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    owner_id_ = 0;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password_hash()) {
      if (password_hash_ != &::google::protobuf::internal::kEmptyString) {
        password_hash_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ms_volume_gateway_cred::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 owner_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_id_)));
          set_has_owner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }
      
      // required string username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password_hash;
        break;
      }
      
      // required string password_hash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password_hash().data(), this->password_hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ms_volume_gateway_cred::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 owner_id = 1;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->owner_id(), output);
  }
  
  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }
  
  // required string password_hash = 3;
  if (has_password_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password_hash().data(), this->password_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password_hash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ms_volume_gateway_cred::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 owner_id = 1;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->owner_id(), target);
  }
  
  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }
  
  // required string password_hash = 3;
  if (has_password_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password_hash().data(), this->password_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password_hash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ms_volume_gateway_cred::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 owner_id = 1;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->owner_id());
    }
    
    // required string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required string password_hash = 3;
    if (has_password_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password_hash());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ms_volume_gateway_cred::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ms_volume_gateway_cred* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ms_volume_gateway_cred*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ms_volume_gateway_cred::MergeFrom(const ms_volume_gateway_cred& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner_id()) {
      set_owner_id(from.owner_id());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password_hash()) {
      set_password_hash(from.password_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ms_volume_gateway_cred::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ms_volume_gateway_cred::CopyFrom(const ms_volume_gateway_cred& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ms_volume_gateway_cred::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ms_volume_gateway_cred::Swap(ms_volume_gateway_cred* other) {
  if (other != this) {
    std::swap(owner_id_, other->owner_id_);
    std::swap(username_, other->username_);
    std::swap(password_hash_, other->password_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ms_volume_gateway_cred::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ms_volume_gateway_cred_descriptor_;
  metadata.reflection = ms_volume_gateway_cred_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ms_volume_metadata::kBlocksizeFieldNumber;
const int ms_volume_metadata::kRequesterIdFieldNumber;
const int ms_volume_metadata::kOwnerIdFieldNumber;
const int ms_volume_metadata::kVolumeIdFieldNumber;
const int ms_volume_metadata::kVolumeVersionFieldNumber;
const int ms_volume_metadata::kNameFieldNumber;
const int ms_volume_metadata::kDescriptionFieldNumber;
const int ms_volume_metadata::kReplicaUrlsFieldNumber;
const int ms_volume_metadata::kUserGatewayCredsFieldNumber;
#endif  // !_MSC_VER

ms_volume_metadata::ms_volume_metadata()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ms_volume_metadata::InitAsDefaultInstance() {
}

ms_volume_metadata::ms_volume_metadata(const ms_volume_metadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ms_volume_metadata::SharedCtor() {
  _cached_size_ = 0;
  blocksize_ = GOOGLE_ULONGLONG(0);
  requester_id_ = GOOGLE_ULONGLONG(0);
  owner_id_ = GOOGLE_ULONGLONG(0);
  volume_id_ = GOOGLE_ULONGLONG(0);
  volume_version_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ms_volume_metadata::~ms_volume_metadata() {
  SharedDtor();
}

void ms_volume_metadata::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void ms_volume_metadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ms_volume_metadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ms_volume_metadata_descriptor_;
}

const ms_volume_metadata& ms_volume_metadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ms_2eproto();  return *default_instance_;
}

ms_volume_metadata* ms_volume_metadata::default_instance_ = NULL;

ms_volume_metadata* ms_volume_metadata::New() const {
  return new ms_volume_metadata;
}

void ms_volume_metadata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    blocksize_ = GOOGLE_ULONGLONG(0);
    requester_id_ = GOOGLE_ULONGLONG(0);
    owner_id_ = GOOGLE_ULONGLONG(0);
    volume_id_ = GOOGLE_ULONGLONG(0);
    volume_version_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
  }
  replica_urls_.Clear();
  user_gateway_creds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ms_volume_metadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 blocksize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blocksize_)));
          set_has_blocksize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_requester_id;
        break;
      }
      
      // required uint64 requester_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requester_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &requester_id_)));
          set_has_requester_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_owner_id;
        break;
      }
      
      // required uint64 owner_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &owner_id_)));
          set_has_owner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_volume_id;
        break;
      }
      
      // required uint64 volume_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &volume_id_)));
          set_has_volume_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_volume_version;
        break;
      }
      
      // required uint64 volume_version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &volume_version_)));
          set_has_volume_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }
      
      // required string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_description;
        break;
      }
      
      // required string description = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_replica_urls;
        break;
      }
      
      // repeated string replica_urls = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replica_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_replica_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->replica_urls(0).data(), this->replica_urls(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_replica_urls;
        if (input->ExpectTag(74)) goto parse_user_gateway_creds;
        break;
      }
      
      // repeated .ms.ms_volume_gateway_cred user_gateway_creds = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_gateway_creds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_gateway_creds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_user_gateway_creds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ms_volume_metadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 blocksize = 1;
  if (has_blocksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->blocksize(), output);
  }
  
  // required uint64 requester_id = 2;
  if (has_requester_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->requester_id(), output);
  }
  
  // required uint64 owner_id = 3;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->owner_id(), output);
  }
  
  // required uint64 volume_id = 4;
  if (has_volume_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->volume_id(), output);
  }
  
  // required uint64 volume_version = 5;
  if (has_volume_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->volume_version(), output);
  }
  
  // required string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }
  
  // required string description = 7;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->description(), output);
  }
  
  // repeated string replica_urls = 8;
  for (int i = 0; i < this->replica_urls_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->replica_urls(i).data(), this->replica_urls(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->replica_urls(i), output);
  }
  
  // repeated .ms.ms_volume_gateway_cred user_gateway_creds = 9;
  for (int i = 0; i < this->user_gateway_creds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->user_gateway_creds(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ms_volume_metadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 blocksize = 1;
  if (has_blocksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->blocksize(), target);
  }
  
  // required uint64 requester_id = 2;
  if (has_requester_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->requester_id(), target);
  }
  
  // required uint64 owner_id = 3;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->owner_id(), target);
  }
  
  // required uint64 volume_id = 4;
  if (has_volume_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->volume_id(), target);
  }
  
  // required uint64 volume_version = 5;
  if (has_volume_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->volume_version(), target);
  }
  
  // required string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }
  
  // required string description = 7;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->description(), target);
  }
  
  // repeated string replica_urls = 8;
  for (int i = 0; i < this->replica_urls_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->replica_urls(i).data(), this->replica_urls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->replica_urls(i), target);
  }
  
  // repeated .ms.ms_volume_gateway_cred user_gateway_creds = 9;
  for (int i = 0; i < this->user_gateway_creds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->user_gateway_creds(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ms_volume_metadata::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 blocksize = 1;
    if (has_blocksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->blocksize());
    }
    
    // required uint64 requester_id = 2;
    if (has_requester_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->requester_id());
    }
    
    // required uint64 owner_id = 3;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->owner_id());
    }
    
    // required uint64 volume_id = 4;
    if (has_volume_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->volume_id());
    }
    
    // required uint64 volume_version = 5;
    if (has_volume_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->volume_version());
    }
    
    // required string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string description = 7;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
  }
  // repeated string replica_urls = 8;
  total_size += 1 * this->replica_urls_size();
  for (int i = 0; i < this->replica_urls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->replica_urls(i));
  }
  
  // repeated .ms.ms_volume_gateway_cred user_gateway_creds = 9;
  total_size += 1 * this->user_gateway_creds_size();
  for (int i = 0; i < this->user_gateway_creds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_gateway_creds(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ms_volume_metadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ms_volume_metadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ms_volume_metadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ms_volume_metadata::MergeFrom(const ms_volume_metadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  replica_urls_.MergeFrom(from.replica_urls_);
  user_gateway_creds_.MergeFrom(from.user_gateway_creds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blocksize()) {
      set_blocksize(from.blocksize());
    }
    if (from.has_requester_id()) {
      set_requester_id(from.requester_id());
    }
    if (from.has_owner_id()) {
      set_owner_id(from.owner_id());
    }
    if (from.has_volume_id()) {
      set_volume_id(from.volume_id());
    }
    if (from.has_volume_version()) {
      set_volume_version(from.volume_version());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ms_volume_metadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ms_volume_metadata::CopyFrom(const ms_volume_metadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ms_volume_metadata::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  for (int i = 0; i < user_gateway_creds_size(); i++) {
    if (!this->user_gateway_creds(i).IsInitialized()) return false;
  }
  return true;
}

void ms_volume_metadata::Swap(ms_volume_metadata* other) {
  if (other != this) {
    std::swap(blocksize_, other->blocksize_);
    std::swap(requester_id_, other->requester_id_);
    std::swap(owner_id_, other->owner_id_);
    std::swap(volume_id_, other->volume_id_);
    std::swap(volume_version_, other->volume_version_);
    std::swap(name_, other->name_);
    std::swap(description_, other->description_);
    replica_urls_.Swap(&other->replica_urls_);
    user_gateway_creds_.Swap(&other->user_gateway_creds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ms_volume_metadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ms_volume_metadata_descriptor_;
  metadata.reflection = ms_volume_metadata_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ms

// @@protoc_insertion_point(global_scope)
