// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "serialization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Serialization {

namespace {

const ::google::protobuf::Descriptor* FileMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockList_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TruncateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TruncateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetachRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetachRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockURLSetMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockURLSetMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ManifestMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManifestMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcceptMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* WriteMsg_MsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_serialization_2eproto() {
  protobuf_AddDesc_serialization_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "serialization.proto");
  GOOGLE_CHECK(file != NULL);
  FileMetadata_descriptor_ = file->message_type(0);
  static const int FileMetadata_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetadata, fs_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetadata, file_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetadata, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetadata, mtime_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetadata, mtime_nsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetadata, content_url_),
  };
  FileMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileMetadata_descriptor_,
      FileMetadata::default_instance_,
      FileMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileMetadata));
  BlockList_descriptor_ = file->message_type(1);
  static const int BlockList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockList, start_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockList, end_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockList, version_),
  };
  BlockList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockList_descriptor_,
      BlockList::default_instance_,
      BlockList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockList));
  BlockData_descriptor_ = file->message_type(2);
  static const int BlockData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockData, fs_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockData, file_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockData, block_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockData, block_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockData, data_),
  };
  BlockData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockData_descriptor_,
      BlockData::default_instance_,
      BlockData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockData));
  TruncateRequest_descriptor_ = file->message_type(3);
  static const int TruncateRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateRequest, fs_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateRequest, file_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateRequest, size_),
  };
  TruncateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TruncateRequest_descriptor_,
      TruncateRequest::default_instance_,
      TruncateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TruncateRequest));
  DetachRequest_descriptor_ = file->message_type(4);
  static const int DetachRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetachRequest, fs_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetachRequest, file_version_),
  };
  DetachRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetachRequest_descriptor_,
      DetachRequest::default_instance_,
      DetachRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetachRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetachRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetachRequest));
  BlockURLSetMsg_descriptor_ = file->message_type(5);
  static const int BlockURLSetMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockURLSetMsg, start_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockURLSetMsg, end_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockURLSetMsg, block_versions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockURLSetMsg, file_url_),
  };
  BlockURLSetMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockURLSetMsg_descriptor_,
      BlockURLSetMsg::default_instance_,
      BlockURLSetMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockURLSetMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockURLSetMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockURLSetMsg));
  ManifestMsg_descriptor_ = file->message_type(6);
  static const int ManifestMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManifestMsg, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManifestMsg, file_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManifestMsg, mtime_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManifestMsg, mtime_nsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManifestMsg, manifest_mtime_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManifestMsg, manifest_mtime_nsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManifestMsg, block_url_set_),
  };
  ManifestMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManifestMsg_descriptor_,
      ManifestMsg::default_instance_,
      ManifestMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManifestMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManifestMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManifestMsg));
  AcceptMsg_descriptor_ = file->message_type(7);
  static const int AcceptMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptMsg, fs_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptMsg, file_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptMsg, block_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptMsg, block_version_),
  };
  AcceptMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcceptMsg_descriptor_,
      AcceptMsg::default_instance_,
      AcceptMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcceptMsg));
  WriteMsg_descriptor_ = file->message_type(8);
  static const int WriteMsg_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteMsg, write_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteMsg, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteMsg, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteMsg, volume_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteMsg, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteMsg, blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteMsg, blockdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteMsg, truncate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteMsg, detach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteMsg, accepted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteMsg, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteMsg, errortxt_),
  };
  WriteMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteMsg_descriptor_,
      WriteMsg::default_instance_,
      WriteMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteMsg));
  WriteMsg_MsgType_descriptor_ = WriteMsg_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_serialization_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileMetadata_descriptor_, &FileMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockList_descriptor_, &BlockList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockData_descriptor_, &BlockData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TruncateRequest_descriptor_, &TruncateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetachRequest_descriptor_, &DetachRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockURLSetMsg_descriptor_, &BlockURLSetMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManifestMsg_descriptor_, &ManifestMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcceptMsg_descriptor_, &AcceptMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteMsg_descriptor_, &WriteMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_serialization_2eproto() {
  delete FileMetadata::default_instance_;
  delete FileMetadata_reflection_;
  delete BlockList::default_instance_;
  delete BlockList_reflection_;
  delete BlockData::default_instance_;
  delete BlockData_reflection_;
  delete TruncateRequest::default_instance_;
  delete TruncateRequest_reflection_;
  delete DetachRequest::default_instance_;
  delete DetachRequest_reflection_;
  delete BlockURLSetMsg::default_instance_;
  delete BlockURLSetMsg_reflection_;
  delete ManifestMsg::default_instance_;
  delete ManifestMsg_reflection_;
  delete AcceptMsg::default_instance_;
  delete AcceptMsg_reflection_;
  delete WriteMsg::default_instance_;
  delete WriteMsg_reflection_;
}

void protobuf_AddDesc_serialization_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023serialization.proto\022\rSerialization\"\177\n\014"
    "FileMetadata\022\017\n\007fs_path\030\006 \002(\t\022\024\n\014file_ve"
    "rsion\030\001 \002(\003\022\014\n\004size\030\002 \002(\004\022\021\n\tmtime_sec\030\003"
    " \002(\003\022\022\n\nmtime_nsec\030\004 \002(\005\022\023\n\013content_url\030"
    "\005 \002(\t\">\n\tBlockList\022\020\n\010start_id\030\001 \002(\004\022\016\n\006"
    "end_id\030\002 \002(\004\022\017\n\007version\030\003 \003(\003\"i\n\tBlockDa"
    "ta\022\017\n\007fs_path\030\001 \002(\t\022\024\n\014file_version\030\002 \002("
    "\003\022\020\n\010block_id\030\003 \002(\004\022\025\n\rblock_version\030\004 \002"
    "(\003\022\014\n\004data\030\005 \002(\t\"F\n\017TruncateRequest\022\017\n\007f"
    "s_path\030\001 \002(\t\022\024\n\014file_version\030\002 \002(\003\022\014\n\004si"
    "ze\030\003 \002(\004\"6\n\rDetachRequest\022\017\n\007fs_path\030\001 \002"
    "(\t\022\024\n\014file_version\030\002 \002(\003\"\\\n\016BlockURLSetM"
    "sg\022\020\n\010start_id\030\001 \002(\004\022\016\n\006end_id\030\002 \002(\004\022\026\n\016"
    "block_versions\030\003 \003(\003\022\020\n\010file_url\030\004 \002(\t\"\307"
    "\001\n\013ManifestMsg\022\014\n\004size\030\001 \002(\004\022\024\n\014file_ver"
    "sion\030\002 \002(\003\022\021\n\tmtime_sec\030\003 \002(\003\022\022\n\nmtime_n"
    "sec\030\004 \002(\005\022\032\n\022manifest_mtime_sec\030\005 \002(\003\022\033\n"
    "\023manifest_mtime_nsec\030\006 \002(\005\0224\n\rblock_url_"
    "set\030\007 \003(\0132\035.Serialization.BlockURLSetMsg"
    "\"[\n\tAcceptMsg\022\017\n\007fs_path\030\004 \002(\t\022\024\n\014file_v"
    "ersion\030\001 \002(\003\022\020\n\010block_id\030\002 \003(\004\022\025\n\rblock_"
    "version\030\003 \003(\003\"\255\004\n\010WriteMsg\022\020\n\010write_id\030\001"
    " \002(\004\022\022\n\nsession_id\030\002 \002(\004\022-\n\004type\030\003 \002(\0162\037"
    ".Serialization.WriteMsg.MsgType\022\017\n\007user_"
    "id\030\004 \002(\r\022\021\n\tvolume_id\030\005 \002(\r\022-\n\010metadata\030"
    "\006 \001(\0132\033.Serialization.FileMetadata\022(\n\006bl"
    "ocks\030\007 \001(\0132\030.Serialization.BlockList\022+\n\t"
    "blockdata\030\010 \001(\0132\030.Serialization.BlockDat"
    "a\0220\n\010truncate\030\t \001(\0132\036.Serialization.Trun"
    "cateRequest\022,\n\006detach\030\n \001(\0132\034.Serializat"
    "ion.DetachRequest\022*\n\010accepted\030\013 \001(\0132\030.Se"
    "rialization.AcceptMsg\022\021\n\terrorcode\030\014 \001(\005"
    "\022\020\n\010errortxt\030\r \001(\t\"q\n\007MsgType\022\013\n\007PREPARE"
    "\020\001\022\013\n\007PROMISE\020\002\022\n\n\006ACCEPT\020\003\022\014\n\010ACCEPTED\020"
    "\004\022\r\n\tBLOCKDATA\020\005\022\014\n\010TRUNCATE\020\006\022\n\n\006DETACH"
    "\020\007\022\t\n\005ERROR\020\010", 1413);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "serialization.proto", &protobuf_RegisterTypes);
  FileMetadata::default_instance_ = new FileMetadata();
  BlockList::default_instance_ = new BlockList();
  BlockData::default_instance_ = new BlockData();
  TruncateRequest::default_instance_ = new TruncateRequest();
  DetachRequest::default_instance_ = new DetachRequest();
  BlockURLSetMsg::default_instance_ = new BlockURLSetMsg();
  ManifestMsg::default_instance_ = new ManifestMsg();
  AcceptMsg::default_instance_ = new AcceptMsg();
  WriteMsg::default_instance_ = new WriteMsg();
  FileMetadata::default_instance_->InitAsDefaultInstance();
  BlockList::default_instance_->InitAsDefaultInstance();
  BlockData::default_instance_->InitAsDefaultInstance();
  TruncateRequest::default_instance_->InitAsDefaultInstance();
  DetachRequest::default_instance_->InitAsDefaultInstance();
  BlockURLSetMsg::default_instance_->InitAsDefaultInstance();
  ManifestMsg::default_instance_->InitAsDefaultInstance();
  AcceptMsg::default_instance_->InitAsDefaultInstance();
  WriteMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_serialization_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_serialization_2eproto {
  StaticDescriptorInitializer_serialization_2eproto() {
    protobuf_AddDesc_serialization_2eproto();
  }
} static_descriptor_initializer_serialization_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int FileMetadata::kFsPathFieldNumber;
const int FileMetadata::kFileVersionFieldNumber;
const int FileMetadata::kSizeFieldNumber;
const int FileMetadata::kMtimeSecFieldNumber;
const int FileMetadata::kMtimeNsecFieldNumber;
const int FileMetadata::kContentUrlFieldNumber;
#endif  // !_MSC_VER

FileMetadata::FileMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileMetadata::InitAsDefaultInstance() {
}

FileMetadata::FileMetadata(const FileMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileMetadata::SharedCtor() {
  _cached_size_ = 0;
  fs_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_version_ = GOOGLE_LONGLONG(0);
  size_ = GOOGLE_ULONGLONG(0);
  mtime_sec_ = GOOGLE_LONGLONG(0);
  mtime_nsec_ = 0;
  content_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileMetadata::~FileMetadata() {
  SharedDtor();
}

void FileMetadata::SharedDtor() {
  if (fs_path_ != &::google::protobuf::internal::kEmptyString) {
    delete fs_path_;
  }
  if (content_url_ != &::google::protobuf::internal::kEmptyString) {
    delete content_url_;
  }
  if (this != default_instance_) {
  }
}

void FileMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileMetadata_descriptor_;
}

const FileMetadata& FileMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();  return *default_instance_;
}

FileMetadata* FileMetadata::default_instance_ = NULL;

FileMetadata* FileMetadata::New() const {
  return new FileMetadata;
}

void FileMetadata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fs_path()) {
      if (fs_path_ != &::google::protobuf::internal::kEmptyString) {
        fs_path_->clear();
      }
    }
    file_version_ = GOOGLE_LONGLONG(0);
    size_ = GOOGLE_ULONGLONG(0);
    mtime_sec_ = GOOGLE_LONGLONG(0);
    mtime_nsec_ = 0;
    if (has_content_url()) {
      if (content_url_ != &::google::protobuf::internal::kEmptyString) {
        content_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 file_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_version_)));
          set_has_file_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }
      
      // required uint64 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mtime_sec;
        break;
      }
      
      // required int64 mtime_sec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mtime_sec_)));
          set_has_mtime_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mtime_nsec;
        break;
      }
      
      // required int32 mtime_nsec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime_nsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mtime_nsec_)));
          set_has_mtime_nsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content_url;
        break;
      }
      
      // required string content_url = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content_url().data(), this->content_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fs_path;
        break;
      }
      
      // required string fs_path = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fs_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fs_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fs_path().data(), this->fs_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 file_version = 1;
  if (has_file_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->file_version(), output);
  }
  
  // required uint64 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }
  
  // required int64 mtime_sec = 3;
  if (has_mtime_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->mtime_sec(), output);
  }
  
  // required int32 mtime_nsec = 4;
  if (has_mtime_nsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mtime_nsec(), output);
  }
  
  // required string content_url = 5;
  if (has_content_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content_url().data(), this->content_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->content_url(), output);
  }
  
  // required string fs_path = 6;
  if (has_fs_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fs_path().data(), this->fs_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->fs_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 file_version = 1;
  if (has_file_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->file_version(), target);
  }
  
  // required uint64 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }
  
  // required int64 mtime_sec = 3;
  if (has_mtime_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->mtime_sec(), target);
  }
  
  // required int32 mtime_nsec = 4;
  if (has_mtime_nsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mtime_nsec(), target);
  }
  
  // required string content_url = 5;
  if (has_content_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content_url().data(), this->content_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content_url(), target);
  }
  
  // required string fs_path = 6;
  if (has_fs_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fs_path().data(), this->fs_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fs_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileMetadata::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fs_path = 6;
    if (has_fs_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fs_path());
    }
    
    // required int64 file_version = 1;
    if (has_file_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->file_version());
    }
    
    // required uint64 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }
    
    // required int64 mtime_sec = 3;
    if (has_mtime_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mtime_sec());
    }
    
    // required int32 mtime_nsec = 4;
    if (has_mtime_nsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mtime_nsec());
    }
    
    // required string content_url = 5;
    if (has_content_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content_url());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileMetadata::MergeFrom(const FileMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fs_path()) {
      set_fs_path(from.fs_path());
    }
    if (from.has_file_version()) {
      set_file_version(from.file_version());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_mtime_sec()) {
      set_mtime_sec(from.mtime_sec());
    }
    if (from.has_mtime_nsec()) {
      set_mtime_nsec(from.mtime_nsec());
    }
    if (from.has_content_url()) {
      set_content_url(from.content_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileMetadata::CopyFrom(const FileMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileMetadata::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void FileMetadata::Swap(FileMetadata* other) {
  if (other != this) {
    std::swap(fs_path_, other->fs_path_);
    std::swap(file_version_, other->file_version_);
    std::swap(size_, other->size_);
    std::swap(mtime_sec_, other->mtime_sec_);
    std::swap(mtime_nsec_, other->mtime_nsec_);
    std::swap(content_url_, other->content_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileMetadata_descriptor_;
  metadata.reflection = FileMetadata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockList::kStartIdFieldNumber;
const int BlockList::kEndIdFieldNumber;
const int BlockList::kVersionFieldNumber;
#endif  // !_MSC_VER

BlockList::BlockList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockList::InitAsDefaultInstance() {
}

BlockList::BlockList(const BlockList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockList::SharedCtor() {
  _cached_size_ = 0;
  start_id_ = GOOGLE_ULONGLONG(0);
  end_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockList::~BlockList() {
  SharedDtor();
}

void BlockList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockList_descriptor_;
}

const BlockList& BlockList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();  return *default_instance_;
}

BlockList* BlockList::default_instance_ = NULL;

BlockList* BlockList::New() const {
  return new BlockList;
}

void BlockList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_id_ = GOOGLE_ULONGLONG(0);
    end_id_ = GOOGLE_ULONGLONG(0);
  }
  version_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 start_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_id_)));
          set_has_start_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end_id;
        break;
      }
      
      // required uint64 end_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_id_)));
          set_has_end_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }
      
      // repeated int64 version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_version())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_version())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_version;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 start_id = 1;
  if (has_start_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_id(), output);
  }
  
  // required uint64 end_id = 2;
  if (has_end_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_id(), output);
  }
  
  // repeated int64 version = 3;
  for (int i = 0; i < this->version_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->version(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 start_id = 1;
  if (has_start_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_id(), target);
  }
  
  // required uint64 end_id = 2;
  if (has_end_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_id(), target);
  }
  
  // repeated int64 version = 3;
  for (int i = 0; i < this->version_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->version(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 start_id = 1;
    if (has_start_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_id());
    }
    
    // required uint64 end_id = 2;
    if (has_end_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_id());
    }
    
  }
  // repeated int64 version = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->version_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->version(i));
    }
    total_size += 1 * this->version_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockList::MergeFrom(const BlockList& from) {
  GOOGLE_CHECK_NE(&from, this);
  version_.MergeFrom(from.version_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_id()) {
      set_start_id(from.start_id());
    }
    if (from.has_end_id()) {
      set_end_id(from.end_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockList::CopyFrom(const BlockList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BlockList::Swap(BlockList* other) {
  if (other != this) {
    std::swap(start_id_, other->start_id_);
    std::swap(end_id_, other->end_id_);
    version_.Swap(&other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockList_descriptor_;
  metadata.reflection = BlockList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockData::kFsPathFieldNumber;
const int BlockData::kFileVersionFieldNumber;
const int BlockData::kBlockIdFieldNumber;
const int BlockData::kBlockVersionFieldNumber;
const int BlockData::kDataFieldNumber;
#endif  // !_MSC_VER

BlockData::BlockData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockData::InitAsDefaultInstance() {
}

BlockData::BlockData(const BlockData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockData::SharedCtor() {
  _cached_size_ = 0;
  fs_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_version_ = GOOGLE_LONGLONG(0);
  block_id_ = GOOGLE_ULONGLONG(0);
  block_version_ = GOOGLE_LONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockData::~BlockData() {
  SharedDtor();
}

void BlockData::SharedDtor() {
  if (fs_path_ != &::google::protobuf::internal::kEmptyString) {
    delete fs_path_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void BlockData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockData_descriptor_;
}

const BlockData& BlockData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();  return *default_instance_;
}

BlockData* BlockData::default_instance_ = NULL;

BlockData* BlockData::New() const {
  return new BlockData;
}

void BlockData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fs_path()) {
      if (fs_path_ != &::google::protobuf::internal::kEmptyString) {
        fs_path_->clear();
      }
    }
    file_version_ = GOOGLE_LONGLONG(0);
    block_id_ = GOOGLE_ULONGLONG(0);
    block_version_ = GOOGLE_LONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fs_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fs_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fs_path().data(), this->fs_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_file_version;
        break;
      }
      
      // required int64 file_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_version_)));
          set_has_file_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_block_id;
        break;
      }
      
      // required uint64 block_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &block_id_)));
          set_has_block_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_block_version;
        break;
      }
      
      // required int64 block_version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &block_version_)));
          set_has_block_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }
      
      // required string data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string fs_path = 1;
  if (has_fs_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fs_path().data(), this->fs_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fs_path(), output);
  }
  
  // required int64 file_version = 2;
  if (has_file_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->file_version(), output);
  }
  
  // required uint64 block_id = 3;
  if (has_block_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->block_id(), output);
  }
  
  // required int64 block_version = 4;
  if (has_block_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->block_version(), output);
  }
  
  // required string data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string fs_path = 1;
  if (has_fs_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fs_path().data(), this->fs_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fs_path(), target);
  }
  
  // required int64 file_version = 2;
  if (has_file_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->file_version(), target);
  }
  
  // required uint64 block_id = 3;
  if (has_block_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->block_id(), target);
  }
  
  // required int64 block_version = 4;
  if (has_block_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->block_version(), target);
  }
  
  // required string data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fs_path = 1;
    if (has_fs_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fs_path());
    }
    
    // required int64 file_version = 2;
    if (has_file_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->file_version());
    }
    
    // required uint64 block_id = 3;
    if (has_block_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->block_id());
    }
    
    // required int64 block_version = 4;
    if (has_block_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->block_version());
    }
    
    // required string data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockData::MergeFrom(const BlockData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fs_path()) {
      set_fs_path(from.fs_path());
    }
    if (from.has_file_version()) {
      set_file_version(from.file_version());
    }
    if (from.has_block_id()) {
      set_block_id(from.block_id());
    }
    if (from.has_block_version()) {
      set_block_version(from.block_version());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockData::CopyFrom(const BlockData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void BlockData::Swap(BlockData* other) {
  if (other != this) {
    std::swap(fs_path_, other->fs_path_);
    std::swap(file_version_, other->file_version_);
    std::swap(block_id_, other->block_id_);
    std::swap(block_version_, other->block_version_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockData_descriptor_;
  metadata.reflection = BlockData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TruncateRequest::kFsPathFieldNumber;
const int TruncateRequest::kFileVersionFieldNumber;
const int TruncateRequest::kSizeFieldNumber;
#endif  // !_MSC_VER

TruncateRequest::TruncateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TruncateRequest::InitAsDefaultInstance() {
}

TruncateRequest::TruncateRequest(const TruncateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TruncateRequest::SharedCtor() {
  _cached_size_ = 0;
  fs_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_version_ = GOOGLE_LONGLONG(0);
  size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TruncateRequest::~TruncateRequest() {
  SharedDtor();
}

void TruncateRequest::SharedDtor() {
  if (fs_path_ != &::google::protobuf::internal::kEmptyString) {
    delete fs_path_;
  }
  if (this != default_instance_) {
  }
}

void TruncateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TruncateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TruncateRequest_descriptor_;
}

const TruncateRequest& TruncateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();  return *default_instance_;
}

TruncateRequest* TruncateRequest::default_instance_ = NULL;

TruncateRequest* TruncateRequest::New() const {
  return new TruncateRequest;
}

void TruncateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fs_path()) {
      if (fs_path_ != &::google::protobuf::internal::kEmptyString) {
        fs_path_->clear();
      }
    }
    file_version_ = GOOGLE_LONGLONG(0);
    size_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TruncateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fs_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fs_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fs_path().data(), this->fs_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_file_version;
        break;
      }
      
      // required int64 file_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_version_)));
          set_has_file_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }
      
      // required uint64 size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TruncateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string fs_path = 1;
  if (has_fs_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fs_path().data(), this->fs_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fs_path(), output);
  }
  
  // required int64 file_version = 2;
  if (has_file_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->file_version(), output);
  }
  
  // required uint64 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TruncateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string fs_path = 1;
  if (has_fs_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fs_path().data(), this->fs_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fs_path(), target);
  }
  
  // required int64 file_version = 2;
  if (has_file_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->file_version(), target);
  }
  
  // required uint64 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TruncateRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fs_path = 1;
    if (has_fs_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fs_path());
    }
    
    // required int64 file_version = 2;
    if (has_file_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->file_version());
    }
    
    // required uint64 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TruncateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TruncateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TruncateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TruncateRequest::MergeFrom(const TruncateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fs_path()) {
      set_fs_path(from.fs_path());
    }
    if (from.has_file_version()) {
      set_file_version(from.file_version());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TruncateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TruncateRequest::CopyFrom(const TruncateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruncateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void TruncateRequest::Swap(TruncateRequest* other) {
  if (other != this) {
    std::swap(fs_path_, other->fs_path_);
    std::swap(file_version_, other->file_version_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TruncateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TruncateRequest_descriptor_;
  metadata.reflection = TruncateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DetachRequest::kFsPathFieldNumber;
const int DetachRequest::kFileVersionFieldNumber;
#endif  // !_MSC_VER

DetachRequest::DetachRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DetachRequest::InitAsDefaultInstance() {
}

DetachRequest::DetachRequest(const DetachRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DetachRequest::SharedCtor() {
  _cached_size_ = 0;
  fs_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_version_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetachRequest::~DetachRequest() {
  SharedDtor();
}

void DetachRequest::SharedDtor() {
  if (fs_path_ != &::google::protobuf::internal::kEmptyString) {
    delete fs_path_;
  }
  if (this != default_instance_) {
  }
}

void DetachRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetachRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetachRequest_descriptor_;
}

const DetachRequest& DetachRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();  return *default_instance_;
}

DetachRequest* DetachRequest::default_instance_ = NULL;

DetachRequest* DetachRequest::New() const {
  return new DetachRequest;
}

void DetachRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fs_path()) {
      if (fs_path_ != &::google::protobuf::internal::kEmptyString) {
        fs_path_->clear();
      }
    }
    file_version_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetachRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fs_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fs_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fs_path().data(), this->fs_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_file_version;
        break;
      }
      
      // required int64 file_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_version_)));
          set_has_file_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DetachRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string fs_path = 1;
  if (has_fs_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fs_path().data(), this->fs_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fs_path(), output);
  }
  
  // required int64 file_version = 2;
  if (has_file_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->file_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DetachRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string fs_path = 1;
  if (has_fs_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fs_path().data(), this->fs_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fs_path(), target);
  }
  
  // required int64 file_version = 2;
  if (has_file_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->file_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DetachRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fs_path = 1;
    if (has_fs_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fs_path());
    }
    
    // required int64 file_version = 2;
    if (has_file_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->file_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetachRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetachRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetachRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetachRequest::MergeFrom(const DetachRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fs_path()) {
      set_fs_path(from.fs_path());
    }
    if (from.has_file_version()) {
      set_file_version(from.file_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetachRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetachRequest::CopyFrom(const DetachRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetachRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DetachRequest::Swap(DetachRequest* other) {
  if (other != this) {
    std::swap(fs_path_, other->fs_path_);
    std::swap(file_version_, other->file_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetachRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetachRequest_descriptor_;
  metadata.reflection = DetachRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockURLSetMsg::kStartIdFieldNumber;
const int BlockURLSetMsg::kEndIdFieldNumber;
const int BlockURLSetMsg::kBlockVersionsFieldNumber;
const int BlockURLSetMsg::kFileUrlFieldNumber;
#endif  // !_MSC_VER

BlockURLSetMsg::BlockURLSetMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockURLSetMsg::InitAsDefaultInstance() {
}

BlockURLSetMsg::BlockURLSetMsg(const BlockURLSetMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockURLSetMsg::SharedCtor() {
  _cached_size_ = 0;
  start_id_ = GOOGLE_ULONGLONG(0);
  end_id_ = GOOGLE_ULONGLONG(0);
  file_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockURLSetMsg::~BlockURLSetMsg() {
  SharedDtor();
}

void BlockURLSetMsg::SharedDtor() {
  if (file_url_ != &::google::protobuf::internal::kEmptyString) {
    delete file_url_;
  }
  if (this != default_instance_) {
  }
}

void BlockURLSetMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockURLSetMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockURLSetMsg_descriptor_;
}

const BlockURLSetMsg& BlockURLSetMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();  return *default_instance_;
}

BlockURLSetMsg* BlockURLSetMsg::default_instance_ = NULL;

BlockURLSetMsg* BlockURLSetMsg::New() const {
  return new BlockURLSetMsg;
}

void BlockURLSetMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_id_ = GOOGLE_ULONGLONG(0);
    end_id_ = GOOGLE_ULONGLONG(0);
    if (has_file_url()) {
      if (file_url_ != &::google::protobuf::internal::kEmptyString) {
        file_url_->clear();
      }
    }
  }
  block_versions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockURLSetMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 start_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_id_)));
          set_has_start_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end_id;
        break;
      }
      
      // required uint64 end_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_id_)));
          set_has_end_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_block_versions;
        break;
      }
      
      // repeated int64 block_versions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_versions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_block_versions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_block_versions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_block_versions;
        if (input->ExpectTag(34)) goto parse_file_url;
        break;
      }
      
      // required string file_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_url().data(), this->file_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockURLSetMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 start_id = 1;
  if (has_start_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_id(), output);
  }
  
  // required uint64 end_id = 2;
  if (has_end_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_id(), output);
  }
  
  // repeated int64 block_versions = 3;
  for (int i = 0; i < this->block_versions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->block_versions(i), output);
  }
  
  // required string file_url = 4;
  if (has_file_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_url().data(), this->file_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->file_url(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockURLSetMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 start_id = 1;
  if (has_start_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_id(), target);
  }
  
  // required uint64 end_id = 2;
  if (has_end_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_id(), target);
  }
  
  // repeated int64 block_versions = 3;
  for (int i = 0; i < this->block_versions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->block_versions(i), target);
  }
  
  // required string file_url = 4;
  if (has_file_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_url().data(), this->file_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file_url(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockURLSetMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 start_id = 1;
    if (has_start_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_id());
    }
    
    // required uint64 end_id = 2;
    if (has_end_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_id());
    }
    
    // required string file_url = 4;
    if (has_file_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_url());
    }
    
  }
  // repeated int64 block_versions = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->block_versions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->block_versions(i));
    }
    total_size += 1 * this->block_versions_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockURLSetMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockURLSetMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockURLSetMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockURLSetMsg::MergeFrom(const BlockURLSetMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  block_versions_.MergeFrom(from.block_versions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_id()) {
      set_start_id(from.start_id());
    }
    if (from.has_end_id()) {
      set_end_id(from.end_id());
    }
    if (from.has_file_url()) {
      set_file_url(from.file_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockURLSetMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockURLSetMsg::CopyFrom(const BlockURLSetMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockURLSetMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  return true;
}

void BlockURLSetMsg::Swap(BlockURLSetMsg* other) {
  if (other != this) {
    std::swap(start_id_, other->start_id_);
    std::swap(end_id_, other->end_id_);
    block_versions_.Swap(&other->block_versions_);
    std::swap(file_url_, other->file_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockURLSetMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockURLSetMsg_descriptor_;
  metadata.reflection = BlockURLSetMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ManifestMsg::kSizeFieldNumber;
const int ManifestMsg::kFileVersionFieldNumber;
const int ManifestMsg::kMtimeSecFieldNumber;
const int ManifestMsg::kMtimeNsecFieldNumber;
const int ManifestMsg::kManifestMtimeSecFieldNumber;
const int ManifestMsg::kManifestMtimeNsecFieldNumber;
const int ManifestMsg::kBlockUrlSetFieldNumber;
#endif  // !_MSC_VER

ManifestMsg::ManifestMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ManifestMsg::InitAsDefaultInstance() {
}

ManifestMsg::ManifestMsg(const ManifestMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ManifestMsg::SharedCtor() {
  _cached_size_ = 0;
  size_ = GOOGLE_ULONGLONG(0);
  file_version_ = GOOGLE_LONGLONG(0);
  mtime_sec_ = GOOGLE_LONGLONG(0);
  mtime_nsec_ = 0;
  manifest_mtime_sec_ = GOOGLE_LONGLONG(0);
  manifest_mtime_nsec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManifestMsg::~ManifestMsg() {
  SharedDtor();
}

void ManifestMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ManifestMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManifestMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManifestMsg_descriptor_;
}

const ManifestMsg& ManifestMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();  return *default_instance_;
}

ManifestMsg* ManifestMsg::default_instance_ = NULL;

ManifestMsg* ManifestMsg::New() const {
  return new ManifestMsg;
}

void ManifestMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_ = GOOGLE_ULONGLONG(0);
    file_version_ = GOOGLE_LONGLONG(0);
    mtime_sec_ = GOOGLE_LONGLONG(0);
    mtime_nsec_ = 0;
    manifest_mtime_sec_ = GOOGLE_LONGLONG(0);
    manifest_mtime_nsec_ = 0;
  }
  block_url_set_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManifestMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_file_version;
        break;
      }
      
      // required int64 file_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_version_)));
          set_has_file_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mtime_sec;
        break;
      }
      
      // required int64 mtime_sec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mtime_sec_)));
          set_has_mtime_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mtime_nsec;
        break;
      }
      
      // required int32 mtime_nsec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime_nsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mtime_nsec_)));
          set_has_mtime_nsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_manifest_mtime_sec;
        break;
      }
      
      // required int64 manifest_mtime_sec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manifest_mtime_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &manifest_mtime_sec_)));
          set_has_manifest_mtime_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_manifest_mtime_nsec;
        break;
      }
      
      // required int32 manifest_mtime_nsec = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manifest_mtime_nsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &manifest_mtime_nsec_)));
          set_has_manifest_mtime_nsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_block_url_set;
        break;
      }
      
      // repeated .Serialization.BlockURLSetMsg block_url_set = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_url_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_block_url_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_block_url_set;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ManifestMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->size(), output);
  }
  
  // required int64 file_version = 2;
  if (has_file_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->file_version(), output);
  }
  
  // required int64 mtime_sec = 3;
  if (has_mtime_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->mtime_sec(), output);
  }
  
  // required int32 mtime_nsec = 4;
  if (has_mtime_nsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mtime_nsec(), output);
  }
  
  // required int64 manifest_mtime_sec = 5;
  if (has_manifest_mtime_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->manifest_mtime_sec(), output);
  }
  
  // required int32 manifest_mtime_nsec = 6;
  if (has_manifest_mtime_nsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->manifest_mtime_nsec(), output);
  }
  
  // repeated .Serialization.BlockURLSetMsg block_url_set = 7;
  for (int i = 0; i < this->block_url_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->block_url_set(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ManifestMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->size(), target);
  }
  
  // required int64 file_version = 2;
  if (has_file_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->file_version(), target);
  }
  
  // required int64 mtime_sec = 3;
  if (has_mtime_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->mtime_sec(), target);
  }
  
  // required int32 mtime_nsec = 4;
  if (has_mtime_nsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mtime_nsec(), target);
  }
  
  // required int64 manifest_mtime_sec = 5;
  if (has_manifest_mtime_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->manifest_mtime_sec(), target);
  }
  
  // required int32 manifest_mtime_nsec = 6;
  if (has_manifest_mtime_nsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->manifest_mtime_nsec(), target);
  }
  
  // repeated .Serialization.BlockURLSetMsg block_url_set = 7;
  for (int i = 0; i < this->block_url_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->block_url_set(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ManifestMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }
    
    // required int64 file_version = 2;
    if (has_file_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->file_version());
    }
    
    // required int64 mtime_sec = 3;
    if (has_mtime_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mtime_sec());
    }
    
    // required int32 mtime_nsec = 4;
    if (has_mtime_nsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mtime_nsec());
    }
    
    // required int64 manifest_mtime_sec = 5;
    if (has_manifest_mtime_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->manifest_mtime_sec());
    }
    
    // required int32 manifest_mtime_nsec = 6;
    if (has_manifest_mtime_nsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->manifest_mtime_nsec());
    }
    
  }
  // repeated .Serialization.BlockURLSetMsg block_url_set = 7;
  total_size += 1 * this->block_url_set_size();
  for (int i = 0; i < this->block_url_set_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->block_url_set(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManifestMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManifestMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManifestMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManifestMsg::MergeFrom(const ManifestMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  block_url_set_.MergeFrom(from.block_url_set_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_file_version()) {
      set_file_version(from.file_version());
    }
    if (from.has_mtime_sec()) {
      set_mtime_sec(from.mtime_sec());
    }
    if (from.has_mtime_nsec()) {
      set_mtime_nsec(from.mtime_nsec());
    }
    if (from.has_manifest_mtime_sec()) {
      set_manifest_mtime_sec(from.manifest_mtime_sec());
    }
    if (from.has_manifest_mtime_nsec()) {
      set_manifest_mtime_nsec(from.manifest_mtime_nsec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManifestMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManifestMsg::CopyFrom(const ManifestMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManifestMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  for (int i = 0; i < block_url_set_size(); i++) {
    if (!this->block_url_set(i).IsInitialized()) return false;
  }
  return true;
}

void ManifestMsg::Swap(ManifestMsg* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(file_version_, other->file_version_);
    std::swap(mtime_sec_, other->mtime_sec_);
    std::swap(mtime_nsec_, other->mtime_nsec_);
    std::swap(manifest_mtime_sec_, other->manifest_mtime_sec_);
    std::swap(manifest_mtime_nsec_, other->manifest_mtime_nsec_);
    block_url_set_.Swap(&other->block_url_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManifestMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManifestMsg_descriptor_;
  metadata.reflection = ManifestMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AcceptMsg::kFsPathFieldNumber;
const int AcceptMsg::kFileVersionFieldNumber;
const int AcceptMsg::kBlockIdFieldNumber;
const int AcceptMsg::kBlockVersionFieldNumber;
#endif  // !_MSC_VER

AcceptMsg::AcceptMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AcceptMsg::InitAsDefaultInstance() {
}

AcceptMsg::AcceptMsg(const AcceptMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AcceptMsg::SharedCtor() {
  _cached_size_ = 0;
  fs_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_version_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcceptMsg::~AcceptMsg() {
  SharedDtor();
}

void AcceptMsg::SharedDtor() {
  if (fs_path_ != &::google::protobuf::internal::kEmptyString) {
    delete fs_path_;
  }
  if (this != default_instance_) {
  }
}

void AcceptMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptMsg_descriptor_;
}

const AcceptMsg& AcceptMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();  return *default_instance_;
}

AcceptMsg* AcceptMsg::default_instance_ = NULL;

AcceptMsg* AcceptMsg::New() const {
  return new AcceptMsg;
}

void AcceptMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fs_path()) {
      if (fs_path_ != &::google::protobuf::internal::kEmptyString) {
        fs_path_->clear();
      }
    }
    file_version_ = GOOGLE_LONGLONG(0);
  }
  block_id_.Clear();
  block_version_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcceptMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 file_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_version_)));
          set_has_file_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_block_id;
        break;
      }
      
      // repeated uint64 block_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_block_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_block_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_block_id;
        if (input->ExpectTag(24)) goto parse_block_version;
        break;
      }
      
      // repeated int64 block_version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_block_version())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_block_version())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_block_version;
        if (input->ExpectTag(34)) goto parse_fs_path;
        break;
      }
      
      // required string fs_path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fs_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fs_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fs_path().data(), this->fs_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AcceptMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 file_version = 1;
  if (has_file_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->file_version(), output);
  }
  
  // repeated uint64 block_id = 2;
  for (int i = 0; i < this->block_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->block_id(i), output);
  }
  
  // repeated int64 block_version = 3;
  for (int i = 0; i < this->block_version_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->block_version(i), output);
  }
  
  // required string fs_path = 4;
  if (has_fs_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fs_path().data(), this->fs_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->fs_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AcceptMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 file_version = 1;
  if (has_file_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->file_version(), target);
  }
  
  // repeated uint64 block_id = 2;
  for (int i = 0; i < this->block_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->block_id(i), target);
  }
  
  // repeated int64 block_version = 3;
  for (int i = 0; i < this->block_version_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->block_version(i), target);
  }
  
  // required string fs_path = 4;
  if (has_fs_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fs_path().data(), this->fs_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fs_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AcceptMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fs_path = 4;
    if (has_fs_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fs_path());
    }
    
    // required int64 file_version = 1;
    if (has_file_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->file_version());
    }
    
  }
  // repeated uint64 block_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->block_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->block_id(i));
    }
    total_size += 1 * this->block_id_size() + data_size;
  }
  
  // repeated int64 block_version = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->block_version_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->block_version(i));
    }
    total_size += 1 * this->block_version_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcceptMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcceptMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcceptMsg::MergeFrom(const AcceptMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  block_id_.MergeFrom(from.block_id_);
  block_version_.MergeFrom(from.block_version_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fs_path()) {
      set_fs_path(from.fs_path());
    }
    if (from.has_file_version()) {
      set_file_version(from.file_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcceptMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptMsg::CopyFrom(const AcceptMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void AcceptMsg::Swap(AcceptMsg* other) {
  if (other != this) {
    std::swap(fs_path_, other->fs_path_);
    std::swap(file_version_, other->file_version_);
    block_id_.Swap(&other->block_id_);
    block_version_.Swap(&other->block_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcceptMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptMsg_descriptor_;
  metadata.reflection = AcceptMsg_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* WriteMsg_MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteMsg_MsgType_descriptor_;
}
bool WriteMsg_MsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const WriteMsg_MsgType WriteMsg::PREPARE;
const WriteMsg_MsgType WriteMsg::PROMISE;
const WriteMsg_MsgType WriteMsg::ACCEPT;
const WriteMsg_MsgType WriteMsg::ACCEPTED;
const WriteMsg_MsgType WriteMsg::BLOCKDATA;
const WriteMsg_MsgType WriteMsg::TRUNCATE;
const WriteMsg_MsgType WriteMsg::DETACH;
const WriteMsg_MsgType WriteMsg::ERROR;
const WriteMsg_MsgType WriteMsg::MsgType_MIN;
const WriteMsg_MsgType WriteMsg::MsgType_MAX;
const int WriteMsg::MsgType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int WriteMsg::kWriteIdFieldNumber;
const int WriteMsg::kSessionIdFieldNumber;
const int WriteMsg::kTypeFieldNumber;
const int WriteMsg::kUserIdFieldNumber;
const int WriteMsg::kVolumeIdFieldNumber;
const int WriteMsg::kMetadataFieldNumber;
const int WriteMsg::kBlocksFieldNumber;
const int WriteMsg::kBlockdataFieldNumber;
const int WriteMsg::kTruncateFieldNumber;
const int WriteMsg::kDetachFieldNumber;
const int WriteMsg::kAcceptedFieldNumber;
const int WriteMsg::kErrorcodeFieldNumber;
const int WriteMsg::kErrortxtFieldNumber;
#endif  // !_MSC_VER

WriteMsg::WriteMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WriteMsg::InitAsDefaultInstance() {
  metadata_ = const_cast< ::Serialization::FileMetadata*>(&::Serialization::FileMetadata::default_instance());
  blocks_ = const_cast< ::Serialization::BlockList*>(&::Serialization::BlockList::default_instance());
  blockdata_ = const_cast< ::Serialization::BlockData*>(&::Serialization::BlockData::default_instance());
  truncate_ = const_cast< ::Serialization::TruncateRequest*>(&::Serialization::TruncateRequest::default_instance());
  detach_ = const_cast< ::Serialization::DetachRequest*>(&::Serialization::DetachRequest::default_instance());
  accepted_ = const_cast< ::Serialization::AcceptMsg*>(&::Serialization::AcceptMsg::default_instance());
}

WriteMsg::WriteMsg(const WriteMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WriteMsg::SharedCtor() {
  _cached_size_ = 0;
  write_id_ = GOOGLE_ULONGLONG(0);
  session_id_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  user_id_ = 0u;
  volume_id_ = 0u;
  metadata_ = NULL;
  blocks_ = NULL;
  blockdata_ = NULL;
  truncate_ = NULL;
  detach_ = NULL;
  accepted_ = NULL;
  errorcode_ = 0;
  errortxt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteMsg::~WriteMsg() {
  SharedDtor();
}

void WriteMsg::SharedDtor() {
  if (errortxt_ != &::google::protobuf::internal::kEmptyString) {
    delete errortxt_;
  }
  if (this != default_instance_) {
    delete metadata_;
    delete blocks_;
    delete blockdata_;
    delete truncate_;
    delete detach_;
    delete accepted_;
  }
}

void WriteMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteMsg_descriptor_;
}

const WriteMsg& WriteMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_2eproto();  return *default_instance_;
}

WriteMsg* WriteMsg::default_instance_ = NULL;

WriteMsg* WriteMsg::New() const {
  return new WriteMsg;
}

void WriteMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    write_id_ = GOOGLE_ULONGLONG(0);
    session_id_ = GOOGLE_ULONGLONG(0);
    type_ = 1;
    user_id_ = 0u;
    volume_id_ = 0u;
    if (has_metadata()) {
      if (metadata_ != NULL) metadata_->::Serialization::FileMetadata::Clear();
    }
    if (has_blocks()) {
      if (blocks_ != NULL) blocks_->::Serialization::BlockList::Clear();
    }
    if (has_blockdata()) {
      if (blockdata_ != NULL) blockdata_->::Serialization::BlockData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_truncate()) {
      if (truncate_ != NULL) truncate_->::Serialization::TruncateRequest::Clear();
    }
    if (has_detach()) {
      if (detach_ != NULL) detach_->::Serialization::DetachRequest::Clear();
    }
    if (has_accepted()) {
      if (accepted_ != NULL) accepted_->::Serialization::AcceptMsg::Clear();
    }
    errorcode_ = 0;
    if (has_errortxt()) {
      if (errortxt_ != &::google::protobuf::internal::kEmptyString) {
        errortxt_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 write_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_id_)));
          set_has_write_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }
      
      // required uint64 session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required .Serialization.WriteMsg.MsgType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Serialization::WriteMsg_MsgType_IsValid(value)) {
            set_type(static_cast< ::Serialization::WriteMsg_MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_user_id;
        break;
      }
      
      // required uint32 user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_volume_id;
        break;
      }
      
      // required uint32 volume_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &volume_id_)));
          set_has_volume_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_metadata;
        break;
      }
      
      // optional .Serialization.FileMetadata metadata = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_blocks;
        break;
      }
      
      // optional .Serialization.BlockList blocks = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_blockdata;
        break;
      }
      
      // optional .Serialization.BlockData blockdata = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blockdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blockdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_truncate;
        break;
      }
      
      // optional .Serialization.TruncateRequest truncate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_truncate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_truncate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_detach;
        break;
      }
      
      // optional .Serialization.DetachRequest detach = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detach:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detach()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_accepted;
        break;
      }
      
      // optional .Serialization.AcceptMsg accepted = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accepted:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accepted()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_errorcode;
        break;
      }
      
      // optional int32 errorcode = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_errortxt;
        break;
      }
      
      // optional string errortxt = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errortxt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errortxt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errortxt().data(), this->errortxt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WriteMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 write_id = 1;
  if (has_write_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->write_id(), output);
  }
  
  // required uint64 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->session_id(), output);
  }
  
  // required .Serialization.WriteMsg.MsgType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }
  
  // required uint32 user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->user_id(), output);
  }
  
  // required uint32 volume_id = 5;
  if (has_volume_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->volume_id(), output);
  }
  
  // optional .Serialization.FileMetadata metadata = 6;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->metadata(), output);
  }
  
  // optional .Serialization.BlockList blocks = 7;
  if (has_blocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->blocks(), output);
  }
  
  // optional .Serialization.BlockData blockdata = 8;
  if (has_blockdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->blockdata(), output);
  }
  
  // optional .Serialization.TruncateRequest truncate = 9;
  if (has_truncate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->truncate(), output);
  }
  
  // optional .Serialization.DetachRequest detach = 10;
  if (has_detach()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->detach(), output);
  }
  
  // optional .Serialization.AcceptMsg accepted = 11;
  if (has_accepted()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->accepted(), output);
  }
  
  // optional int32 errorcode = 12;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->errorcode(), output);
  }
  
  // optional string errortxt = 13;
  if (has_errortxt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errortxt().data(), this->errortxt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->errortxt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WriteMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 write_id = 1;
  if (has_write_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->write_id(), target);
  }
  
  // required uint64 session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->session_id(), target);
  }
  
  // required .Serialization.WriteMsg.MsgType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }
  
  // required uint32 user_id = 4;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->user_id(), target);
  }
  
  // required uint32 volume_id = 5;
  if (has_volume_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->volume_id(), target);
  }
  
  // optional .Serialization.FileMetadata metadata = 6;
  if (has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->metadata(), target);
  }
  
  // optional .Serialization.BlockList blocks = 7;
  if (has_blocks()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->blocks(), target);
  }
  
  // optional .Serialization.BlockData blockdata = 8;
  if (has_blockdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->blockdata(), target);
  }
  
  // optional .Serialization.TruncateRequest truncate = 9;
  if (has_truncate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->truncate(), target);
  }
  
  // optional .Serialization.DetachRequest detach = 10;
  if (has_detach()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->detach(), target);
  }
  
  // optional .Serialization.AcceptMsg accepted = 11;
  if (has_accepted()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->accepted(), target);
  }
  
  // optional int32 errorcode = 12;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->errorcode(), target);
  }
  
  // optional string errortxt = 13;
  if (has_errortxt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errortxt().data(), this->errortxt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->errortxt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WriteMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 write_id = 1;
    if (has_write_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->write_id());
    }
    
    // required uint64 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->session_id());
    }
    
    // required .Serialization.WriteMsg.MsgType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required uint32 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }
    
    // required uint32 volume_id = 5;
    if (has_volume_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->volume_id());
    }
    
    // optional .Serialization.FileMetadata metadata = 6;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata());
    }
    
    // optional .Serialization.BlockList blocks = 7;
    if (has_blocks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blocks());
    }
    
    // optional .Serialization.BlockData blockdata = 8;
    if (has_blockdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blockdata());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Serialization.TruncateRequest truncate = 9;
    if (has_truncate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->truncate());
    }
    
    // optional .Serialization.DetachRequest detach = 10;
    if (has_detach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detach());
    }
    
    // optional .Serialization.AcceptMsg accepted = 11;
    if (has_accepted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accepted());
    }
    
    // optional int32 errorcode = 12;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }
    
    // optional string errortxt = 13;
    if (has_errortxt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errortxt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteMsg::MergeFrom(const WriteMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_write_id()) {
      set_write_id(from.write_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_volume_id()) {
      set_volume_id(from.volume_id());
    }
    if (from.has_metadata()) {
      mutable_metadata()->::Serialization::FileMetadata::MergeFrom(from.metadata());
    }
    if (from.has_blocks()) {
      mutable_blocks()->::Serialization::BlockList::MergeFrom(from.blocks());
    }
    if (from.has_blockdata()) {
      mutable_blockdata()->::Serialization::BlockData::MergeFrom(from.blockdata());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_truncate()) {
      mutable_truncate()->::Serialization::TruncateRequest::MergeFrom(from.truncate());
    }
    if (from.has_detach()) {
      mutable_detach()->::Serialization::DetachRequest::MergeFrom(from.detach());
    }
    if (from.has_accepted()) {
      mutable_accepted()->::Serialization::AcceptMsg::MergeFrom(from.accepted());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_errortxt()) {
      set_errortxt(from.errortxt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteMsg::CopyFrom(const WriteMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_metadata()) {
    if (!this->metadata().IsInitialized()) return false;
  }
  if (has_blocks()) {
    if (!this->blocks().IsInitialized()) return false;
  }
  if (has_blockdata()) {
    if (!this->blockdata().IsInitialized()) return false;
  }
  if (has_truncate()) {
    if (!this->truncate().IsInitialized()) return false;
  }
  if (has_detach()) {
    if (!this->detach().IsInitialized()) return false;
  }
  if (has_accepted()) {
    if (!this->accepted().IsInitialized()) return false;
  }
  return true;
}

void WriteMsg::Swap(WriteMsg* other) {
  if (other != this) {
    std::swap(write_id_, other->write_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(type_, other->type_);
    std::swap(user_id_, other->user_id_);
    std::swap(volume_id_, other->volume_id_);
    std::swap(metadata_, other->metadata_);
    std::swap(blocks_, other->blocks_);
    std::swap(blockdata_, other->blockdata_);
    std::swap(truncate_, other->truncate_);
    std::swap(detach_, other->detach_);
    std::swap(accepted_, other->accepted_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(errortxt_, other->errortxt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteMsg_descriptor_;
  metadata.reflection = WriteMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialization

// @@protoc_insertion_point(global_scope)
