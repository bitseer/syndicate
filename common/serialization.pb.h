// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serialization.proto

#ifndef PROTOBUF_serialization_2eproto__INCLUDED
#define PROTOBUF_serialization_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Serialization {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_serialization_2eproto();
void protobuf_AssignDesc_serialization_2eproto();
void protobuf_ShutdownFile_serialization_2eproto();

class FileMetadata;
class BlockList;
class BlockData;
class TruncateRequest;
class DetachRequest;
class BlockURLSetMsg;
class ManifestMsg;
class AcceptMsg;
class WriteMsg;

enum WriteMsg_MsgType {
  WriteMsg_MsgType_PREPARE = 1,
  WriteMsg_MsgType_PROMISE = 2,
  WriteMsg_MsgType_ACCEPT = 3,
  WriteMsg_MsgType_ACCEPTED = 4,
  WriteMsg_MsgType_BLOCKDATA = 5,
  WriteMsg_MsgType_TRUNCATE = 6,
  WriteMsg_MsgType_DETACH = 7,
  WriteMsg_MsgType_ERROR = 8
};
bool WriteMsg_MsgType_IsValid(int value);
const WriteMsg_MsgType WriteMsg_MsgType_MsgType_MIN = WriteMsg_MsgType_PREPARE;
const WriteMsg_MsgType WriteMsg_MsgType_MsgType_MAX = WriteMsg_MsgType_ERROR;
const int WriteMsg_MsgType_MsgType_ARRAYSIZE = WriteMsg_MsgType_MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* WriteMsg_MsgType_descriptor();
inline const ::std::string& WriteMsg_MsgType_Name(WriteMsg_MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    WriteMsg_MsgType_descriptor(), value);
}
inline bool WriteMsg_MsgType_Parse(
    const ::std::string& name, WriteMsg_MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WriteMsg_MsgType>(
    WriteMsg_MsgType_descriptor(), name, value);
}
// ===================================================================

class FileMetadata : public ::google::protobuf::Message {
 public:
  FileMetadata();
  virtual ~FileMetadata();
  
  FileMetadata(const FileMetadata& from);
  
  inline FileMetadata& operator=(const FileMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileMetadata& default_instance();
  
  void Swap(FileMetadata* other);
  
  // implements Message ----------------------------------------------
  
  FileMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileMetadata& from);
  void MergeFrom(const FileMetadata& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string fs_path = 6;
  inline bool has_fs_path() const;
  inline void clear_fs_path();
  static const int kFsPathFieldNumber = 6;
  inline const ::std::string& fs_path() const;
  inline void set_fs_path(const ::std::string& value);
  inline void set_fs_path(const char* value);
  inline void set_fs_path(const char* value, size_t size);
  inline ::std::string* mutable_fs_path();
  inline ::std::string* release_fs_path();
  
  // required int64 file_version = 1;
  inline bool has_file_version() const;
  inline void clear_file_version();
  static const int kFileVersionFieldNumber = 1;
  inline ::google::protobuf::int64 file_version() const;
  inline void set_file_version(::google::protobuf::int64 value);
  
  // required uint64 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);
  
  // required int64 mtime_sec = 3;
  inline bool has_mtime_sec() const;
  inline void clear_mtime_sec();
  static const int kMtimeSecFieldNumber = 3;
  inline ::google::protobuf::int64 mtime_sec() const;
  inline void set_mtime_sec(::google::protobuf::int64 value);
  
  // required int32 mtime_nsec = 4;
  inline bool has_mtime_nsec() const;
  inline void clear_mtime_nsec();
  static const int kMtimeNsecFieldNumber = 4;
  inline ::google::protobuf::int32 mtime_nsec() const;
  inline void set_mtime_nsec(::google::protobuf::int32 value);
  
  // required string content_url = 5;
  inline bool has_content_url() const;
  inline void clear_content_url();
  static const int kContentUrlFieldNumber = 5;
  inline const ::std::string& content_url() const;
  inline void set_content_url(const ::std::string& value);
  inline void set_content_url(const char* value);
  inline void set_content_url(const char* value, size_t size);
  inline ::std::string* mutable_content_url();
  inline ::std::string* release_content_url();
  
  // @@protoc_insertion_point(class_scope:Serialization.FileMetadata)
 private:
  inline void set_has_fs_path();
  inline void clear_has_fs_path();
  inline void set_has_file_version();
  inline void clear_has_file_version();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_mtime_sec();
  inline void clear_has_mtime_sec();
  inline void set_has_mtime_nsec();
  inline void clear_has_mtime_nsec();
  inline void set_has_content_url();
  inline void clear_has_content_url();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* fs_path_;
  ::google::protobuf::int64 file_version_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::int64 mtime_sec_;
  ::std::string* content_url_;
  ::google::protobuf::int32 mtime_nsec_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_serialization_2eproto();
  friend void protobuf_AssignDesc_serialization_2eproto();
  friend void protobuf_ShutdownFile_serialization_2eproto();
  
  void InitAsDefaultInstance();
  static FileMetadata* default_instance_;
};
// -------------------------------------------------------------------

class BlockList : public ::google::protobuf::Message {
 public:
  BlockList();
  virtual ~BlockList();
  
  BlockList(const BlockList& from);
  
  inline BlockList& operator=(const BlockList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockList& default_instance();
  
  void Swap(BlockList* other);
  
  // implements Message ----------------------------------------------
  
  BlockList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockList& from);
  void MergeFrom(const BlockList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 start_id = 1;
  inline bool has_start_id() const;
  inline void clear_start_id();
  static const int kStartIdFieldNumber = 1;
  inline ::google::protobuf::uint64 start_id() const;
  inline void set_start_id(::google::protobuf::uint64 value);
  
  // required uint64 end_id = 2;
  inline bool has_end_id() const;
  inline void clear_end_id();
  static const int kEndIdFieldNumber = 2;
  inline ::google::protobuf::uint64 end_id() const;
  inline void set_end_id(::google::protobuf::uint64 value);
  
  // repeated int64 version = 3;
  inline int version_size() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline ::google::protobuf::int64 version(int index) const;
  inline void set_version(int index, ::google::protobuf::int64 value);
  inline void add_version(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      version() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_version();
  
  // @@protoc_insertion_point(class_scope:Serialization.BlockList)
 private:
  inline void set_has_start_id();
  inline void clear_has_start_id();
  inline void set_has_end_id();
  inline void clear_has_end_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 start_id_;
  ::google::protobuf::uint64 end_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > version_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_serialization_2eproto();
  friend void protobuf_AssignDesc_serialization_2eproto();
  friend void protobuf_ShutdownFile_serialization_2eproto();
  
  void InitAsDefaultInstance();
  static BlockList* default_instance_;
};
// -------------------------------------------------------------------

class BlockData : public ::google::protobuf::Message {
 public:
  BlockData();
  virtual ~BlockData();
  
  BlockData(const BlockData& from);
  
  inline BlockData& operator=(const BlockData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockData& default_instance();
  
  void Swap(BlockData* other);
  
  // implements Message ----------------------------------------------
  
  BlockData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockData& from);
  void MergeFrom(const BlockData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string fs_path = 1;
  inline bool has_fs_path() const;
  inline void clear_fs_path();
  static const int kFsPathFieldNumber = 1;
  inline const ::std::string& fs_path() const;
  inline void set_fs_path(const ::std::string& value);
  inline void set_fs_path(const char* value);
  inline void set_fs_path(const char* value, size_t size);
  inline ::std::string* mutable_fs_path();
  inline ::std::string* release_fs_path();
  
  // required int64 file_version = 2;
  inline bool has_file_version() const;
  inline void clear_file_version();
  static const int kFileVersionFieldNumber = 2;
  inline ::google::protobuf::int64 file_version() const;
  inline void set_file_version(::google::protobuf::int64 value);
  
  // required uint64 block_id = 3;
  inline bool has_block_id() const;
  inline void clear_block_id();
  static const int kBlockIdFieldNumber = 3;
  inline ::google::protobuf::uint64 block_id() const;
  inline void set_block_id(::google::protobuf::uint64 value);
  
  // required int64 block_version = 4;
  inline bool has_block_version() const;
  inline void clear_block_version();
  static const int kBlockVersionFieldNumber = 4;
  inline ::google::protobuf::int64 block_version() const;
  inline void set_block_version(::google::protobuf::int64 value);
  
  // required string data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // @@protoc_insertion_point(class_scope:Serialization.BlockData)
 private:
  inline void set_has_fs_path();
  inline void clear_has_fs_path();
  inline void set_has_file_version();
  inline void clear_has_file_version();
  inline void set_has_block_id();
  inline void clear_has_block_id();
  inline void set_has_block_version();
  inline void clear_has_block_version();
  inline void set_has_data();
  inline void clear_has_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* fs_path_;
  ::google::protobuf::int64 file_version_;
  ::google::protobuf::uint64 block_id_;
  ::google::protobuf::int64 block_version_;
  ::std::string* data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_serialization_2eproto();
  friend void protobuf_AssignDesc_serialization_2eproto();
  friend void protobuf_ShutdownFile_serialization_2eproto();
  
  void InitAsDefaultInstance();
  static BlockData* default_instance_;
};
// -------------------------------------------------------------------

class TruncateRequest : public ::google::protobuf::Message {
 public:
  TruncateRequest();
  virtual ~TruncateRequest();
  
  TruncateRequest(const TruncateRequest& from);
  
  inline TruncateRequest& operator=(const TruncateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TruncateRequest& default_instance();
  
  void Swap(TruncateRequest* other);
  
  // implements Message ----------------------------------------------
  
  TruncateRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TruncateRequest& from);
  void MergeFrom(const TruncateRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string fs_path = 1;
  inline bool has_fs_path() const;
  inline void clear_fs_path();
  static const int kFsPathFieldNumber = 1;
  inline const ::std::string& fs_path() const;
  inline void set_fs_path(const ::std::string& value);
  inline void set_fs_path(const char* value);
  inline void set_fs_path(const char* value, size_t size);
  inline ::std::string* mutable_fs_path();
  inline ::std::string* release_fs_path();
  
  // required int64 file_version = 2;
  inline bool has_file_version() const;
  inline void clear_file_version();
  static const int kFileVersionFieldNumber = 2;
  inline ::google::protobuf::int64 file_version() const;
  inline void set_file_version(::google::protobuf::int64 value);
  
  // required uint64 size = 3;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:Serialization.TruncateRequest)
 private:
  inline void set_has_fs_path();
  inline void clear_has_fs_path();
  inline void set_has_file_version();
  inline void clear_has_file_version();
  inline void set_has_size();
  inline void clear_has_size();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* fs_path_;
  ::google::protobuf::int64 file_version_;
  ::google::protobuf::uint64 size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_serialization_2eproto();
  friend void protobuf_AssignDesc_serialization_2eproto();
  friend void protobuf_ShutdownFile_serialization_2eproto();
  
  void InitAsDefaultInstance();
  static TruncateRequest* default_instance_;
};
// -------------------------------------------------------------------

class DetachRequest : public ::google::protobuf::Message {
 public:
  DetachRequest();
  virtual ~DetachRequest();
  
  DetachRequest(const DetachRequest& from);
  
  inline DetachRequest& operator=(const DetachRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DetachRequest& default_instance();
  
  void Swap(DetachRequest* other);
  
  // implements Message ----------------------------------------------
  
  DetachRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetachRequest& from);
  void MergeFrom(const DetachRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string fs_path = 1;
  inline bool has_fs_path() const;
  inline void clear_fs_path();
  static const int kFsPathFieldNumber = 1;
  inline const ::std::string& fs_path() const;
  inline void set_fs_path(const ::std::string& value);
  inline void set_fs_path(const char* value);
  inline void set_fs_path(const char* value, size_t size);
  inline ::std::string* mutable_fs_path();
  inline ::std::string* release_fs_path();
  
  // required int64 file_version = 2;
  inline bool has_file_version() const;
  inline void clear_file_version();
  static const int kFileVersionFieldNumber = 2;
  inline ::google::protobuf::int64 file_version() const;
  inline void set_file_version(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Serialization.DetachRequest)
 private:
  inline void set_has_fs_path();
  inline void clear_has_fs_path();
  inline void set_has_file_version();
  inline void clear_has_file_version();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* fs_path_;
  ::google::protobuf::int64 file_version_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_serialization_2eproto();
  friend void protobuf_AssignDesc_serialization_2eproto();
  friend void protobuf_ShutdownFile_serialization_2eproto();
  
  void InitAsDefaultInstance();
  static DetachRequest* default_instance_;
};
// -------------------------------------------------------------------

class BlockURLSetMsg : public ::google::protobuf::Message {
 public:
  BlockURLSetMsg();
  virtual ~BlockURLSetMsg();
  
  BlockURLSetMsg(const BlockURLSetMsg& from);
  
  inline BlockURLSetMsg& operator=(const BlockURLSetMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockURLSetMsg& default_instance();
  
  void Swap(BlockURLSetMsg* other);
  
  // implements Message ----------------------------------------------
  
  BlockURLSetMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockURLSetMsg& from);
  void MergeFrom(const BlockURLSetMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 start_id = 1;
  inline bool has_start_id() const;
  inline void clear_start_id();
  static const int kStartIdFieldNumber = 1;
  inline ::google::protobuf::uint64 start_id() const;
  inline void set_start_id(::google::protobuf::uint64 value);
  
  // required uint64 end_id = 2;
  inline bool has_end_id() const;
  inline void clear_end_id();
  static const int kEndIdFieldNumber = 2;
  inline ::google::protobuf::uint64 end_id() const;
  inline void set_end_id(::google::protobuf::uint64 value);
  
  // repeated int64 block_versions = 3;
  inline int block_versions_size() const;
  inline void clear_block_versions();
  static const int kBlockVersionsFieldNumber = 3;
  inline ::google::protobuf::int64 block_versions(int index) const;
  inline void set_block_versions(int index, ::google::protobuf::int64 value);
  inline void add_block_versions(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      block_versions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_block_versions();
  
  // required string file_url = 4;
  inline bool has_file_url() const;
  inline void clear_file_url();
  static const int kFileUrlFieldNumber = 4;
  inline const ::std::string& file_url() const;
  inline void set_file_url(const ::std::string& value);
  inline void set_file_url(const char* value);
  inline void set_file_url(const char* value, size_t size);
  inline ::std::string* mutable_file_url();
  inline ::std::string* release_file_url();
  
  // @@protoc_insertion_point(class_scope:Serialization.BlockURLSetMsg)
 private:
  inline void set_has_start_id();
  inline void clear_has_start_id();
  inline void set_has_end_id();
  inline void clear_has_end_id();
  inline void set_has_file_url();
  inline void clear_has_file_url();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 start_id_;
  ::google::protobuf::uint64 end_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > block_versions_;
  ::std::string* file_url_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_serialization_2eproto();
  friend void protobuf_AssignDesc_serialization_2eproto();
  friend void protobuf_ShutdownFile_serialization_2eproto();
  
  void InitAsDefaultInstance();
  static BlockURLSetMsg* default_instance_;
};
// -------------------------------------------------------------------

class ManifestMsg : public ::google::protobuf::Message {
 public:
  ManifestMsg();
  virtual ~ManifestMsg();
  
  ManifestMsg(const ManifestMsg& from);
  
  inline ManifestMsg& operator=(const ManifestMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ManifestMsg& default_instance();
  
  void Swap(ManifestMsg* other);
  
  // implements Message ----------------------------------------------
  
  ManifestMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ManifestMsg& from);
  void MergeFrom(const ManifestMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);
  
  // required int64 file_version = 2;
  inline bool has_file_version() const;
  inline void clear_file_version();
  static const int kFileVersionFieldNumber = 2;
  inline ::google::protobuf::int64 file_version() const;
  inline void set_file_version(::google::protobuf::int64 value);
  
  // required int64 mtime_sec = 3;
  inline bool has_mtime_sec() const;
  inline void clear_mtime_sec();
  static const int kMtimeSecFieldNumber = 3;
  inline ::google::protobuf::int64 mtime_sec() const;
  inline void set_mtime_sec(::google::protobuf::int64 value);
  
  // required int32 mtime_nsec = 4;
  inline bool has_mtime_nsec() const;
  inline void clear_mtime_nsec();
  static const int kMtimeNsecFieldNumber = 4;
  inline ::google::protobuf::int32 mtime_nsec() const;
  inline void set_mtime_nsec(::google::protobuf::int32 value);
  
  // required int64 manifest_mtime_sec = 5;
  inline bool has_manifest_mtime_sec() const;
  inline void clear_manifest_mtime_sec();
  static const int kManifestMtimeSecFieldNumber = 5;
  inline ::google::protobuf::int64 manifest_mtime_sec() const;
  inline void set_manifest_mtime_sec(::google::protobuf::int64 value);
  
  // required int32 manifest_mtime_nsec = 6;
  inline bool has_manifest_mtime_nsec() const;
  inline void clear_manifest_mtime_nsec();
  static const int kManifestMtimeNsecFieldNumber = 6;
  inline ::google::protobuf::int32 manifest_mtime_nsec() const;
  inline void set_manifest_mtime_nsec(::google::protobuf::int32 value);
  
  // repeated .Serialization.BlockURLSetMsg block_url_set = 7;
  inline int block_url_set_size() const;
  inline void clear_block_url_set();
  static const int kBlockUrlSetFieldNumber = 7;
  inline const ::Serialization::BlockURLSetMsg& block_url_set(int index) const;
  inline ::Serialization::BlockURLSetMsg* mutable_block_url_set(int index);
  inline ::Serialization::BlockURLSetMsg* add_block_url_set();
  inline const ::google::protobuf::RepeatedPtrField< ::Serialization::BlockURLSetMsg >&
      block_url_set() const;
  inline ::google::protobuf::RepeatedPtrField< ::Serialization::BlockURLSetMsg >*
      mutable_block_url_set();
  
  // @@protoc_insertion_point(class_scope:Serialization.ManifestMsg)
 private:
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_file_version();
  inline void clear_has_file_version();
  inline void set_has_mtime_sec();
  inline void clear_has_mtime_sec();
  inline void set_has_mtime_nsec();
  inline void clear_has_mtime_nsec();
  inline void set_has_manifest_mtime_sec();
  inline void clear_has_manifest_mtime_sec();
  inline void set_has_manifest_mtime_nsec();
  inline void clear_has_manifest_mtime_nsec();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 size_;
  ::google::protobuf::int64 file_version_;
  ::google::protobuf::int64 mtime_sec_;
  ::google::protobuf::int64 manifest_mtime_sec_;
  ::google::protobuf::int32 mtime_nsec_;
  ::google::protobuf::int32 manifest_mtime_nsec_;
  ::google::protobuf::RepeatedPtrField< ::Serialization::BlockURLSetMsg > block_url_set_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_serialization_2eproto();
  friend void protobuf_AssignDesc_serialization_2eproto();
  friend void protobuf_ShutdownFile_serialization_2eproto();
  
  void InitAsDefaultInstance();
  static ManifestMsg* default_instance_;
};
// -------------------------------------------------------------------

class AcceptMsg : public ::google::protobuf::Message {
 public:
  AcceptMsg();
  virtual ~AcceptMsg();
  
  AcceptMsg(const AcceptMsg& from);
  
  inline AcceptMsg& operator=(const AcceptMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptMsg& default_instance();
  
  void Swap(AcceptMsg* other);
  
  // implements Message ----------------------------------------------
  
  AcceptMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AcceptMsg& from);
  void MergeFrom(const AcceptMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string fs_path = 4;
  inline bool has_fs_path() const;
  inline void clear_fs_path();
  static const int kFsPathFieldNumber = 4;
  inline const ::std::string& fs_path() const;
  inline void set_fs_path(const ::std::string& value);
  inline void set_fs_path(const char* value);
  inline void set_fs_path(const char* value, size_t size);
  inline ::std::string* mutable_fs_path();
  inline ::std::string* release_fs_path();
  
  // required int64 file_version = 1;
  inline bool has_file_version() const;
  inline void clear_file_version();
  static const int kFileVersionFieldNumber = 1;
  inline ::google::protobuf::int64 file_version() const;
  inline void set_file_version(::google::protobuf::int64 value);
  
  // repeated uint64 block_id = 2;
  inline int block_id_size() const;
  inline void clear_block_id();
  static const int kBlockIdFieldNumber = 2;
  inline ::google::protobuf::uint64 block_id(int index) const;
  inline void set_block_id(int index, ::google::protobuf::uint64 value);
  inline void add_block_id(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      block_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_block_id();
  
  // repeated int64 block_version = 3;
  inline int block_version_size() const;
  inline void clear_block_version();
  static const int kBlockVersionFieldNumber = 3;
  inline ::google::protobuf::int64 block_version(int index) const;
  inline void set_block_version(int index, ::google::protobuf::int64 value);
  inline void add_block_version(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      block_version() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_block_version();
  
  // @@protoc_insertion_point(class_scope:Serialization.AcceptMsg)
 private:
  inline void set_has_fs_path();
  inline void clear_has_fs_path();
  inline void set_has_file_version();
  inline void clear_has_file_version();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* fs_path_;
  ::google::protobuf::int64 file_version_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > block_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > block_version_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_serialization_2eproto();
  friend void protobuf_AssignDesc_serialization_2eproto();
  friend void protobuf_ShutdownFile_serialization_2eproto();
  
  void InitAsDefaultInstance();
  static AcceptMsg* default_instance_;
};
// -------------------------------------------------------------------

class WriteMsg : public ::google::protobuf::Message {
 public:
  WriteMsg();
  virtual ~WriteMsg();
  
  WriteMsg(const WriteMsg& from);
  
  inline WriteMsg& operator=(const WriteMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteMsg& default_instance();
  
  void Swap(WriteMsg* other);
  
  // implements Message ----------------------------------------------
  
  WriteMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteMsg& from);
  void MergeFrom(const WriteMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef WriteMsg_MsgType MsgType;
  static const MsgType PREPARE = WriteMsg_MsgType_PREPARE;
  static const MsgType PROMISE = WriteMsg_MsgType_PROMISE;
  static const MsgType ACCEPT = WriteMsg_MsgType_ACCEPT;
  static const MsgType ACCEPTED = WriteMsg_MsgType_ACCEPTED;
  static const MsgType BLOCKDATA = WriteMsg_MsgType_BLOCKDATA;
  static const MsgType TRUNCATE = WriteMsg_MsgType_TRUNCATE;
  static const MsgType DETACH = WriteMsg_MsgType_DETACH;
  static const MsgType ERROR = WriteMsg_MsgType_ERROR;
  static inline bool MsgType_IsValid(int value) {
    return WriteMsg_MsgType_IsValid(value);
  }
  static const MsgType MsgType_MIN =
    WriteMsg_MsgType_MsgType_MIN;
  static const MsgType MsgType_MAX =
    WriteMsg_MsgType_MsgType_MAX;
  static const int MsgType_ARRAYSIZE =
    WriteMsg_MsgType_MsgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgType_descriptor() {
    return WriteMsg_MsgType_descriptor();
  }
  static inline const ::std::string& MsgType_Name(MsgType value) {
    return WriteMsg_MsgType_Name(value);
  }
  static inline bool MsgType_Parse(const ::std::string& name,
      MsgType* value) {
    return WriteMsg_MsgType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required uint64 write_id = 1;
  inline bool has_write_id() const;
  inline void clear_write_id();
  static const int kWriteIdFieldNumber = 1;
  inline ::google::protobuf::uint64 write_id() const;
  inline void set_write_id(::google::protobuf::uint64 value);
  
  // required uint64 session_id = 2;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  inline ::google::protobuf::uint64 session_id() const;
  inline void set_session_id(::google::protobuf::uint64 value);
  
  // required .Serialization.WriteMsg.MsgType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Serialization::WriteMsg_MsgType type() const;
  inline void set_type(::Serialization::WriteMsg_MsgType value);
  
  // required uint32 user_id = 4;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);
  
  // required uint32 volume_id = 5;
  inline bool has_volume_id() const;
  inline void clear_volume_id();
  static const int kVolumeIdFieldNumber = 5;
  inline ::google::protobuf::uint32 volume_id() const;
  inline void set_volume_id(::google::protobuf::uint32 value);
  
  // optional .Serialization.FileMetadata metadata = 6;
  inline bool has_metadata() const;
  inline void clear_metadata();
  static const int kMetadataFieldNumber = 6;
  inline const ::Serialization::FileMetadata& metadata() const;
  inline ::Serialization::FileMetadata* mutable_metadata();
  inline ::Serialization::FileMetadata* release_metadata();
  
  // optional .Serialization.BlockList blocks = 7;
  inline bool has_blocks() const;
  inline void clear_blocks();
  static const int kBlocksFieldNumber = 7;
  inline const ::Serialization::BlockList& blocks() const;
  inline ::Serialization::BlockList* mutable_blocks();
  inline ::Serialization::BlockList* release_blocks();
  
  // optional .Serialization.BlockData blockdata = 8;
  inline bool has_blockdata() const;
  inline void clear_blockdata();
  static const int kBlockdataFieldNumber = 8;
  inline const ::Serialization::BlockData& blockdata() const;
  inline ::Serialization::BlockData* mutable_blockdata();
  inline ::Serialization::BlockData* release_blockdata();
  
  // optional .Serialization.TruncateRequest truncate = 9;
  inline bool has_truncate() const;
  inline void clear_truncate();
  static const int kTruncateFieldNumber = 9;
  inline const ::Serialization::TruncateRequest& truncate() const;
  inline ::Serialization::TruncateRequest* mutable_truncate();
  inline ::Serialization::TruncateRequest* release_truncate();
  
  // optional .Serialization.DetachRequest detach = 10;
  inline bool has_detach() const;
  inline void clear_detach();
  static const int kDetachFieldNumber = 10;
  inline const ::Serialization::DetachRequest& detach() const;
  inline ::Serialization::DetachRequest* mutable_detach();
  inline ::Serialization::DetachRequest* release_detach();
  
  // optional .Serialization.AcceptMsg accepted = 11;
  inline bool has_accepted() const;
  inline void clear_accepted();
  static const int kAcceptedFieldNumber = 11;
  inline const ::Serialization::AcceptMsg& accepted() const;
  inline ::Serialization::AcceptMsg* mutable_accepted();
  inline ::Serialization::AcceptMsg* release_accepted();
  
  // optional int32 errorcode = 12;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 12;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);
  
  // optional string errortxt = 13;
  inline bool has_errortxt() const;
  inline void clear_errortxt();
  static const int kErrortxtFieldNumber = 13;
  inline const ::std::string& errortxt() const;
  inline void set_errortxt(const ::std::string& value);
  inline void set_errortxt(const char* value);
  inline void set_errortxt(const char* value, size_t size);
  inline ::std::string* mutable_errortxt();
  inline ::std::string* release_errortxt();
  
  // @@protoc_insertion_point(class_scope:Serialization.WriteMsg)
 private:
  inline void set_has_write_id();
  inline void clear_has_write_id();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_volume_id();
  inline void clear_has_volume_id();
  inline void set_has_metadata();
  inline void clear_has_metadata();
  inline void set_has_blocks();
  inline void clear_has_blocks();
  inline void set_has_blockdata();
  inline void clear_has_blockdata();
  inline void set_has_truncate();
  inline void clear_has_truncate();
  inline void set_has_detach();
  inline void clear_has_detach();
  inline void set_has_accepted();
  inline void clear_has_accepted();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_errortxt();
  inline void clear_has_errortxt();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 write_id_;
  ::google::protobuf::uint64 session_id_;
  int type_;
  ::google::protobuf::uint32 user_id_;
  ::Serialization::FileMetadata* metadata_;
  ::Serialization::BlockList* blocks_;
  ::Serialization::BlockData* blockdata_;
  ::google::protobuf::uint32 volume_id_;
  ::google::protobuf::int32 errorcode_;
  ::Serialization::TruncateRequest* truncate_;
  ::Serialization::DetachRequest* detach_;
  ::Serialization::AcceptMsg* accepted_;
  ::std::string* errortxt_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_serialization_2eproto();
  friend void protobuf_AssignDesc_serialization_2eproto();
  friend void protobuf_ShutdownFile_serialization_2eproto();
  
  void InitAsDefaultInstance();
  static WriteMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// FileMetadata

// required string fs_path = 6;
inline bool FileMetadata::has_fs_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileMetadata::set_has_fs_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileMetadata::clear_has_fs_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileMetadata::clear_fs_path() {
  if (fs_path_ != &::google::protobuf::internal::kEmptyString) {
    fs_path_->clear();
  }
  clear_has_fs_path();
}
inline const ::std::string& FileMetadata::fs_path() const {
  return *fs_path_;
}
inline void FileMetadata::set_fs_path(const ::std::string& value) {
  set_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    fs_path_ = new ::std::string;
  }
  fs_path_->assign(value);
}
inline void FileMetadata::set_fs_path(const char* value) {
  set_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    fs_path_ = new ::std::string;
  }
  fs_path_->assign(value);
}
inline void FileMetadata::set_fs_path(const char* value, size_t size) {
  set_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    fs_path_ = new ::std::string;
  }
  fs_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileMetadata::mutable_fs_path() {
  set_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    fs_path_ = new ::std::string;
  }
  return fs_path_;
}
inline ::std::string* FileMetadata::release_fs_path() {
  clear_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fs_path_;
    fs_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 file_version = 1;
inline bool FileMetadata::has_file_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileMetadata::set_has_file_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileMetadata::clear_has_file_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileMetadata::clear_file_version() {
  file_version_ = GOOGLE_LONGLONG(0);
  clear_has_file_version();
}
inline ::google::protobuf::int64 FileMetadata::file_version() const {
  return file_version_;
}
inline void FileMetadata::set_file_version(::google::protobuf::int64 value) {
  set_has_file_version();
  file_version_ = value;
}

// required uint64 size = 2;
inline bool FileMetadata::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileMetadata::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileMetadata::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileMetadata::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 FileMetadata::size() const {
  return size_;
}
inline void FileMetadata::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
}

// required int64 mtime_sec = 3;
inline bool FileMetadata::has_mtime_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileMetadata::set_has_mtime_sec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FileMetadata::clear_has_mtime_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FileMetadata::clear_mtime_sec() {
  mtime_sec_ = GOOGLE_LONGLONG(0);
  clear_has_mtime_sec();
}
inline ::google::protobuf::int64 FileMetadata::mtime_sec() const {
  return mtime_sec_;
}
inline void FileMetadata::set_mtime_sec(::google::protobuf::int64 value) {
  set_has_mtime_sec();
  mtime_sec_ = value;
}

// required int32 mtime_nsec = 4;
inline bool FileMetadata::has_mtime_nsec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FileMetadata::set_has_mtime_nsec() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FileMetadata::clear_has_mtime_nsec() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FileMetadata::clear_mtime_nsec() {
  mtime_nsec_ = 0;
  clear_has_mtime_nsec();
}
inline ::google::protobuf::int32 FileMetadata::mtime_nsec() const {
  return mtime_nsec_;
}
inline void FileMetadata::set_mtime_nsec(::google::protobuf::int32 value) {
  set_has_mtime_nsec();
  mtime_nsec_ = value;
}

// required string content_url = 5;
inline bool FileMetadata::has_content_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FileMetadata::set_has_content_url() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FileMetadata::clear_has_content_url() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FileMetadata::clear_content_url() {
  if (content_url_ != &::google::protobuf::internal::kEmptyString) {
    content_url_->clear();
  }
  clear_has_content_url();
}
inline const ::std::string& FileMetadata::content_url() const {
  return *content_url_;
}
inline void FileMetadata::set_content_url(const ::std::string& value) {
  set_has_content_url();
  if (content_url_ == &::google::protobuf::internal::kEmptyString) {
    content_url_ = new ::std::string;
  }
  content_url_->assign(value);
}
inline void FileMetadata::set_content_url(const char* value) {
  set_has_content_url();
  if (content_url_ == &::google::protobuf::internal::kEmptyString) {
    content_url_ = new ::std::string;
  }
  content_url_->assign(value);
}
inline void FileMetadata::set_content_url(const char* value, size_t size) {
  set_has_content_url();
  if (content_url_ == &::google::protobuf::internal::kEmptyString) {
    content_url_ = new ::std::string;
  }
  content_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileMetadata::mutable_content_url() {
  set_has_content_url();
  if (content_url_ == &::google::protobuf::internal::kEmptyString) {
    content_url_ = new ::std::string;
  }
  return content_url_;
}
inline ::std::string* FileMetadata::release_content_url() {
  clear_has_content_url();
  if (content_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_url_;
    content_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BlockList

// required uint64 start_id = 1;
inline bool BlockList::has_start_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockList::set_has_start_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockList::clear_has_start_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockList::clear_start_id() {
  start_id_ = GOOGLE_ULONGLONG(0);
  clear_has_start_id();
}
inline ::google::protobuf::uint64 BlockList::start_id() const {
  return start_id_;
}
inline void BlockList::set_start_id(::google::protobuf::uint64 value) {
  set_has_start_id();
  start_id_ = value;
}

// required uint64 end_id = 2;
inline bool BlockList::has_end_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockList::set_has_end_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockList::clear_has_end_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockList::clear_end_id() {
  end_id_ = GOOGLE_ULONGLONG(0);
  clear_has_end_id();
}
inline ::google::protobuf::uint64 BlockList::end_id() const {
  return end_id_;
}
inline void BlockList::set_end_id(::google::protobuf::uint64 value) {
  set_has_end_id();
  end_id_ = value;
}

// repeated int64 version = 3;
inline int BlockList::version_size() const {
  return version_.size();
}
inline void BlockList::clear_version() {
  version_.Clear();
}
inline ::google::protobuf::int64 BlockList::version(int index) const {
  return version_.Get(index);
}
inline void BlockList::set_version(int index, ::google::protobuf::int64 value) {
  version_.Set(index, value);
}
inline void BlockList::add_version(::google::protobuf::int64 value) {
  version_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BlockList::version() const {
  return version_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BlockList::mutable_version() {
  return &version_;
}

// -------------------------------------------------------------------

// BlockData

// required string fs_path = 1;
inline bool BlockData::has_fs_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockData::set_has_fs_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockData::clear_has_fs_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockData::clear_fs_path() {
  if (fs_path_ != &::google::protobuf::internal::kEmptyString) {
    fs_path_->clear();
  }
  clear_has_fs_path();
}
inline const ::std::string& BlockData::fs_path() const {
  return *fs_path_;
}
inline void BlockData::set_fs_path(const ::std::string& value) {
  set_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    fs_path_ = new ::std::string;
  }
  fs_path_->assign(value);
}
inline void BlockData::set_fs_path(const char* value) {
  set_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    fs_path_ = new ::std::string;
  }
  fs_path_->assign(value);
}
inline void BlockData::set_fs_path(const char* value, size_t size) {
  set_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    fs_path_ = new ::std::string;
  }
  fs_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlockData::mutable_fs_path() {
  set_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    fs_path_ = new ::std::string;
  }
  return fs_path_;
}
inline ::std::string* BlockData::release_fs_path() {
  clear_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fs_path_;
    fs_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 file_version = 2;
inline bool BlockData::has_file_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockData::set_has_file_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockData::clear_has_file_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockData::clear_file_version() {
  file_version_ = GOOGLE_LONGLONG(0);
  clear_has_file_version();
}
inline ::google::protobuf::int64 BlockData::file_version() const {
  return file_version_;
}
inline void BlockData::set_file_version(::google::protobuf::int64 value) {
  set_has_file_version();
  file_version_ = value;
}

// required uint64 block_id = 3;
inline bool BlockData::has_block_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockData::set_has_block_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockData::clear_has_block_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockData::clear_block_id() {
  block_id_ = GOOGLE_ULONGLONG(0);
  clear_has_block_id();
}
inline ::google::protobuf::uint64 BlockData::block_id() const {
  return block_id_;
}
inline void BlockData::set_block_id(::google::protobuf::uint64 value) {
  set_has_block_id();
  block_id_ = value;
}

// required int64 block_version = 4;
inline bool BlockData::has_block_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockData::set_has_block_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlockData::clear_has_block_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlockData::clear_block_version() {
  block_version_ = GOOGLE_LONGLONG(0);
  clear_has_block_version();
}
inline ::google::protobuf::int64 BlockData::block_version() const {
  return block_version_;
}
inline void BlockData::set_block_version(::google::protobuf::int64 value) {
  set_has_block_version();
  block_version_ = value;
}

// required string data = 5;
inline bool BlockData::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockData::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlockData::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlockData::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& BlockData::data() const {
  return *data_;
}
inline void BlockData::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void BlockData::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void BlockData::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlockData::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* BlockData::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TruncateRequest

// required string fs_path = 1;
inline bool TruncateRequest::has_fs_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TruncateRequest::set_has_fs_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TruncateRequest::clear_has_fs_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TruncateRequest::clear_fs_path() {
  if (fs_path_ != &::google::protobuf::internal::kEmptyString) {
    fs_path_->clear();
  }
  clear_has_fs_path();
}
inline const ::std::string& TruncateRequest::fs_path() const {
  return *fs_path_;
}
inline void TruncateRequest::set_fs_path(const ::std::string& value) {
  set_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    fs_path_ = new ::std::string;
  }
  fs_path_->assign(value);
}
inline void TruncateRequest::set_fs_path(const char* value) {
  set_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    fs_path_ = new ::std::string;
  }
  fs_path_->assign(value);
}
inline void TruncateRequest::set_fs_path(const char* value, size_t size) {
  set_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    fs_path_ = new ::std::string;
  }
  fs_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TruncateRequest::mutable_fs_path() {
  set_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    fs_path_ = new ::std::string;
  }
  return fs_path_;
}
inline ::std::string* TruncateRequest::release_fs_path() {
  clear_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fs_path_;
    fs_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 file_version = 2;
inline bool TruncateRequest::has_file_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TruncateRequest::set_has_file_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TruncateRequest::clear_has_file_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TruncateRequest::clear_file_version() {
  file_version_ = GOOGLE_LONGLONG(0);
  clear_has_file_version();
}
inline ::google::protobuf::int64 TruncateRequest::file_version() const {
  return file_version_;
}
inline void TruncateRequest::set_file_version(::google::protobuf::int64 value) {
  set_has_file_version();
  file_version_ = value;
}

// required uint64 size = 3;
inline bool TruncateRequest::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TruncateRequest::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TruncateRequest::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TruncateRequest::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 TruncateRequest::size() const {
  return size_;
}
inline void TruncateRequest::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
}

// -------------------------------------------------------------------

// DetachRequest

// required string fs_path = 1;
inline bool DetachRequest::has_fs_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetachRequest::set_has_fs_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetachRequest::clear_has_fs_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetachRequest::clear_fs_path() {
  if (fs_path_ != &::google::protobuf::internal::kEmptyString) {
    fs_path_->clear();
  }
  clear_has_fs_path();
}
inline const ::std::string& DetachRequest::fs_path() const {
  return *fs_path_;
}
inline void DetachRequest::set_fs_path(const ::std::string& value) {
  set_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    fs_path_ = new ::std::string;
  }
  fs_path_->assign(value);
}
inline void DetachRequest::set_fs_path(const char* value) {
  set_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    fs_path_ = new ::std::string;
  }
  fs_path_->assign(value);
}
inline void DetachRequest::set_fs_path(const char* value, size_t size) {
  set_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    fs_path_ = new ::std::string;
  }
  fs_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DetachRequest::mutable_fs_path() {
  set_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    fs_path_ = new ::std::string;
  }
  return fs_path_;
}
inline ::std::string* DetachRequest::release_fs_path() {
  clear_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fs_path_;
    fs_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 file_version = 2;
inline bool DetachRequest::has_file_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetachRequest::set_has_file_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetachRequest::clear_has_file_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetachRequest::clear_file_version() {
  file_version_ = GOOGLE_LONGLONG(0);
  clear_has_file_version();
}
inline ::google::protobuf::int64 DetachRequest::file_version() const {
  return file_version_;
}
inline void DetachRequest::set_file_version(::google::protobuf::int64 value) {
  set_has_file_version();
  file_version_ = value;
}

// -------------------------------------------------------------------

// BlockURLSetMsg

// required uint64 start_id = 1;
inline bool BlockURLSetMsg::has_start_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockURLSetMsg::set_has_start_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockURLSetMsg::clear_has_start_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockURLSetMsg::clear_start_id() {
  start_id_ = GOOGLE_ULONGLONG(0);
  clear_has_start_id();
}
inline ::google::protobuf::uint64 BlockURLSetMsg::start_id() const {
  return start_id_;
}
inline void BlockURLSetMsg::set_start_id(::google::protobuf::uint64 value) {
  set_has_start_id();
  start_id_ = value;
}

// required uint64 end_id = 2;
inline bool BlockURLSetMsg::has_end_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockURLSetMsg::set_has_end_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockURLSetMsg::clear_has_end_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockURLSetMsg::clear_end_id() {
  end_id_ = GOOGLE_ULONGLONG(0);
  clear_has_end_id();
}
inline ::google::protobuf::uint64 BlockURLSetMsg::end_id() const {
  return end_id_;
}
inline void BlockURLSetMsg::set_end_id(::google::protobuf::uint64 value) {
  set_has_end_id();
  end_id_ = value;
}

// repeated int64 block_versions = 3;
inline int BlockURLSetMsg::block_versions_size() const {
  return block_versions_.size();
}
inline void BlockURLSetMsg::clear_block_versions() {
  block_versions_.Clear();
}
inline ::google::protobuf::int64 BlockURLSetMsg::block_versions(int index) const {
  return block_versions_.Get(index);
}
inline void BlockURLSetMsg::set_block_versions(int index, ::google::protobuf::int64 value) {
  block_versions_.Set(index, value);
}
inline void BlockURLSetMsg::add_block_versions(::google::protobuf::int64 value) {
  block_versions_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BlockURLSetMsg::block_versions() const {
  return block_versions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BlockURLSetMsg::mutable_block_versions() {
  return &block_versions_;
}

// required string file_url = 4;
inline bool BlockURLSetMsg::has_file_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockURLSetMsg::set_has_file_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlockURLSetMsg::clear_has_file_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlockURLSetMsg::clear_file_url() {
  if (file_url_ != &::google::protobuf::internal::kEmptyString) {
    file_url_->clear();
  }
  clear_has_file_url();
}
inline const ::std::string& BlockURLSetMsg::file_url() const {
  return *file_url_;
}
inline void BlockURLSetMsg::set_file_url(const ::std::string& value) {
  set_has_file_url();
  if (file_url_ == &::google::protobuf::internal::kEmptyString) {
    file_url_ = new ::std::string;
  }
  file_url_->assign(value);
}
inline void BlockURLSetMsg::set_file_url(const char* value) {
  set_has_file_url();
  if (file_url_ == &::google::protobuf::internal::kEmptyString) {
    file_url_ = new ::std::string;
  }
  file_url_->assign(value);
}
inline void BlockURLSetMsg::set_file_url(const char* value, size_t size) {
  set_has_file_url();
  if (file_url_ == &::google::protobuf::internal::kEmptyString) {
    file_url_ = new ::std::string;
  }
  file_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlockURLSetMsg::mutable_file_url() {
  set_has_file_url();
  if (file_url_ == &::google::protobuf::internal::kEmptyString) {
    file_url_ = new ::std::string;
  }
  return file_url_;
}
inline ::std::string* BlockURLSetMsg::release_file_url() {
  clear_has_file_url();
  if (file_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_url_;
    file_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ManifestMsg

// required uint64 size = 1;
inline bool ManifestMsg::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ManifestMsg::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ManifestMsg::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ManifestMsg::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 ManifestMsg::size() const {
  return size_;
}
inline void ManifestMsg::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
}

// required int64 file_version = 2;
inline bool ManifestMsg::has_file_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ManifestMsg::set_has_file_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ManifestMsg::clear_has_file_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ManifestMsg::clear_file_version() {
  file_version_ = GOOGLE_LONGLONG(0);
  clear_has_file_version();
}
inline ::google::protobuf::int64 ManifestMsg::file_version() const {
  return file_version_;
}
inline void ManifestMsg::set_file_version(::google::protobuf::int64 value) {
  set_has_file_version();
  file_version_ = value;
}

// required int64 mtime_sec = 3;
inline bool ManifestMsg::has_mtime_sec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ManifestMsg::set_has_mtime_sec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ManifestMsg::clear_has_mtime_sec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ManifestMsg::clear_mtime_sec() {
  mtime_sec_ = GOOGLE_LONGLONG(0);
  clear_has_mtime_sec();
}
inline ::google::protobuf::int64 ManifestMsg::mtime_sec() const {
  return mtime_sec_;
}
inline void ManifestMsg::set_mtime_sec(::google::protobuf::int64 value) {
  set_has_mtime_sec();
  mtime_sec_ = value;
}

// required int32 mtime_nsec = 4;
inline bool ManifestMsg::has_mtime_nsec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ManifestMsg::set_has_mtime_nsec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ManifestMsg::clear_has_mtime_nsec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ManifestMsg::clear_mtime_nsec() {
  mtime_nsec_ = 0;
  clear_has_mtime_nsec();
}
inline ::google::protobuf::int32 ManifestMsg::mtime_nsec() const {
  return mtime_nsec_;
}
inline void ManifestMsg::set_mtime_nsec(::google::protobuf::int32 value) {
  set_has_mtime_nsec();
  mtime_nsec_ = value;
}

// required int64 manifest_mtime_sec = 5;
inline bool ManifestMsg::has_manifest_mtime_sec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ManifestMsg::set_has_manifest_mtime_sec() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ManifestMsg::clear_has_manifest_mtime_sec() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ManifestMsg::clear_manifest_mtime_sec() {
  manifest_mtime_sec_ = GOOGLE_LONGLONG(0);
  clear_has_manifest_mtime_sec();
}
inline ::google::protobuf::int64 ManifestMsg::manifest_mtime_sec() const {
  return manifest_mtime_sec_;
}
inline void ManifestMsg::set_manifest_mtime_sec(::google::protobuf::int64 value) {
  set_has_manifest_mtime_sec();
  manifest_mtime_sec_ = value;
}

// required int32 manifest_mtime_nsec = 6;
inline bool ManifestMsg::has_manifest_mtime_nsec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ManifestMsg::set_has_manifest_mtime_nsec() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ManifestMsg::clear_has_manifest_mtime_nsec() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ManifestMsg::clear_manifest_mtime_nsec() {
  manifest_mtime_nsec_ = 0;
  clear_has_manifest_mtime_nsec();
}
inline ::google::protobuf::int32 ManifestMsg::manifest_mtime_nsec() const {
  return manifest_mtime_nsec_;
}
inline void ManifestMsg::set_manifest_mtime_nsec(::google::protobuf::int32 value) {
  set_has_manifest_mtime_nsec();
  manifest_mtime_nsec_ = value;
}

// repeated .Serialization.BlockURLSetMsg block_url_set = 7;
inline int ManifestMsg::block_url_set_size() const {
  return block_url_set_.size();
}
inline void ManifestMsg::clear_block_url_set() {
  block_url_set_.Clear();
}
inline const ::Serialization::BlockURLSetMsg& ManifestMsg::block_url_set(int index) const {
  return block_url_set_.Get(index);
}
inline ::Serialization::BlockURLSetMsg* ManifestMsg::mutable_block_url_set(int index) {
  return block_url_set_.Mutable(index);
}
inline ::Serialization::BlockURLSetMsg* ManifestMsg::add_block_url_set() {
  return block_url_set_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Serialization::BlockURLSetMsg >&
ManifestMsg::block_url_set() const {
  return block_url_set_;
}
inline ::google::protobuf::RepeatedPtrField< ::Serialization::BlockURLSetMsg >*
ManifestMsg::mutable_block_url_set() {
  return &block_url_set_;
}

// -------------------------------------------------------------------

// AcceptMsg

// required string fs_path = 4;
inline bool AcceptMsg::has_fs_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AcceptMsg::set_has_fs_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AcceptMsg::clear_has_fs_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AcceptMsg::clear_fs_path() {
  if (fs_path_ != &::google::protobuf::internal::kEmptyString) {
    fs_path_->clear();
  }
  clear_has_fs_path();
}
inline const ::std::string& AcceptMsg::fs_path() const {
  return *fs_path_;
}
inline void AcceptMsg::set_fs_path(const ::std::string& value) {
  set_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    fs_path_ = new ::std::string;
  }
  fs_path_->assign(value);
}
inline void AcceptMsg::set_fs_path(const char* value) {
  set_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    fs_path_ = new ::std::string;
  }
  fs_path_->assign(value);
}
inline void AcceptMsg::set_fs_path(const char* value, size_t size) {
  set_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    fs_path_ = new ::std::string;
  }
  fs_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AcceptMsg::mutable_fs_path() {
  set_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    fs_path_ = new ::std::string;
  }
  return fs_path_;
}
inline ::std::string* AcceptMsg::release_fs_path() {
  clear_has_fs_path();
  if (fs_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fs_path_;
    fs_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 file_version = 1;
inline bool AcceptMsg::has_file_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AcceptMsg::set_has_file_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AcceptMsg::clear_has_file_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AcceptMsg::clear_file_version() {
  file_version_ = GOOGLE_LONGLONG(0);
  clear_has_file_version();
}
inline ::google::protobuf::int64 AcceptMsg::file_version() const {
  return file_version_;
}
inline void AcceptMsg::set_file_version(::google::protobuf::int64 value) {
  set_has_file_version();
  file_version_ = value;
}

// repeated uint64 block_id = 2;
inline int AcceptMsg::block_id_size() const {
  return block_id_.size();
}
inline void AcceptMsg::clear_block_id() {
  block_id_.Clear();
}
inline ::google::protobuf::uint64 AcceptMsg::block_id(int index) const {
  return block_id_.Get(index);
}
inline void AcceptMsg::set_block_id(int index, ::google::protobuf::uint64 value) {
  block_id_.Set(index, value);
}
inline void AcceptMsg::add_block_id(::google::protobuf::uint64 value) {
  block_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AcceptMsg::block_id() const {
  return block_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AcceptMsg::mutable_block_id() {
  return &block_id_;
}

// repeated int64 block_version = 3;
inline int AcceptMsg::block_version_size() const {
  return block_version_.size();
}
inline void AcceptMsg::clear_block_version() {
  block_version_.Clear();
}
inline ::google::protobuf::int64 AcceptMsg::block_version(int index) const {
  return block_version_.Get(index);
}
inline void AcceptMsg::set_block_version(int index, ::google::protobuf::int64 value) {
  block_version_.Set(index, value);
}
inline void AcceptMsg::add_block_version(::google::protobuf::int64 value) {
  block_version_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
AcceptMsg::block_version() const {
  return block_version_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
AcceptMsg::mutable_block_version() {
  return &block_version_;
}

// -------------------------------------------------------------------

// WriteMsg

// required uint64 write_id = 1;
inline bool WriteMsg::has_write_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WriteMsg::set_has_write_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WriteMsg::clear_has_write_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WriteMsg::clear_write_id() {
  write_id_ = GOOGLE_ULONGLONG(0);
  clear_has_write_id();
}
inline ::google::protobuf::uint64 WriteMsg::write_id() const {
  return write_id_;
}
inline void WriteMsg::set_write_id(::google::protobuf::uint64 value) {
  set_has_write_id();
  write_id_ = value;
}

// required uint64 session_id = 2;
inline bool WriteMsg::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WriteMsg::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WriteMsg::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WriteMsg::clear_session_id() {
  session_id_ = GOOGLE_ULONGLONG(0);
  clear_has_session_id();
}
inline ::google::protobuf::uint64 WriteMsg::session_id() const {
  return session_id_;
}
inline void WriteMsg::set_session_id(::google::protobuf::uint64 value) {
  set_has_session_id();
  session_id_ = value;
}

// required .Serialization.WriteMsg.MsgType type = 3;
inline bool WriteMsg::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WriteMsg::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WriteMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WriteMsg::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Serialization::WriteMsg_MsgType WriteMsg::type() const {
  return static_cast< ::Serialization::WriteMsg_MsgType >(type_);
}
inline void WriteMsg::set_type(::Serialization::WriteMsg_MsgType value) {
  GOOGLE_DCHECK(::Serialization::WriteMsg_MsgType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 user_id = 4;
inline bool WriteMsg::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WriteMsg::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WriteMsg::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WriteMsg::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 WriteMsg::user_id() const {
  return user_id_;
}
inline void WriteMsg::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required uint32 volume_id = 5;
inline bool WriteMsg::has_volume_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WriteMsg::set_has_volume_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WriteMsg::clear_has_volume_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WriteMsg::clear_volume_id() {
  volume_id_ = 0u;
  clear_has_volume_id();
}
inline ::google::protobuf::uint32 WriteMsg::volume_id() const {
  return volume_id_;
}
inline void WriteMsg::set_volume_id(::google::protobuf::uint32 value) {
  set_has_volume_id();
  volume_id_ = value;
}

// optional .Serialization.FileMetadata metadata = 6;
inline bool WriteMsg::has_metadata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WriteMsg::set_has_metadata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WriteMsg::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WriteMsg::clear_metadata() {
  if (metadata_ != NULL) metadata_->::Serialization::FileMetadata::Clear();
  clear_has_metadata();
}
inline const ::Serialization::FileMetadata& WriteMsg::metadata() const {
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
inline ::Serialization::FileMetadata* WriteMsg::mutable_metadata() {
  set_has_metadata();
  if (metadata_ == NULL) metadata_ = new ::Serialization::FileMetadata;
  return metadata_;
}
inline ::Serialization::FileMetadata* WriteMsg::release_metadata() {
  clear_has_metadata();
  ::Serialization::FileMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}

// optional .Serialization.BlockList blocks = 7;
inline bool WriteMsg::has_blocks() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WriteMsg::set_has_blocks() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WriteMsg::clear_has_blocks() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WriteMsg::clear_blocks() {
  if (blocks_ != NULL) blocks_->::Serialization::BlockList::Clear();
  clear_has_blocks();
}
inline const ::Serialization::BlockList& WriteMsg::blocks() const {
  return blocks_ != NULL ? *blocks_ : *default_instance_->blocks_;
}
inline ::Serialization::BlockList* WriteMsg::mutable_blocks() {
  set_has_blocks();
  if (blocks_ == NULL) blocks_ = new ::Serialization::BlockList;
  return blocks_;
}
inline ::Serialization::BlockList* WriteMsg::release_blocks() {
  clear_has_blocks();
  ::Serialization::BlockList* temp = blocks_;
  blocks_ = NULL;
  return temp;
}

// optional .Serialization.BlockData blockdata = 8;
inline bool WriteMsg::has_blockdata() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WriteMsg::set_has_blockdata() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WriteMsg::clear_has_blockdata() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WriteMsg::clear_blockdata() {
  if (blockdata_ != NULL) blockdata_->::Serialization::BlockData::Clear();
  clear_has_blockdata();
}
inline const ::Serialization::BlockData& WriteMsg::blockdata() const {
  return blockdata_ != NULL ? *blockdata_ : *default_instance_->blockdata_;
}
inline ::Serialization::BlockData* WriteMsg::mutable_blockdata() {
  set_has_blockdata();
  if (blockdata_ == NULL) blockdata_ = new ::Serialization::BlockData;
  return blockdata_;
}
inline ::Serialization::BlockData* WriteMsg::release_blockdata() {
  clear_has_blockdata();
  ::Serialization::BlockData* temp = blockdata_;
  blockdata_ = NULL;
  return temp;
}

// optional .Serialization.TruncateRequest truncate = 9;
inline bool WriteMsg::has_truncate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WriteMsg::set_has_truncate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WriteMsg::clear_has_truncate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WriteMsg::clear_truncate() {
  if (truncate_ != NULL) truncate_->::Serialization::TruncateRequest::Clear();
  clear_has_truncate();
}
inline const ::Serialization::TruncateRequest& WriteMsg::truncate() const {
  return truncate_ != NULL ? *truncate_ : *default_instance_->truncate_;
}
inline ::Serialization::TruncateRequest* WriteMsg::mutable_truncate() {
  set_has_truncate();
  if (truncate_ == NULL) truncate_ = new ::Serialization::TruncateRequest;
  return truncate_;
}
inline ::Serialization::TruncateRequest* WriteMsg::release_truncate() {
  clear_has_truncate();
  ::Serialization::TruncateRequest* temp = truncate_;
  truncate_ = NULL;
  return temp;
}

// optional .Serialization.DetachRequest detach = 10;
inline bool WriteMsg::has_detach() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WriteMsg::set_has_detach() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WriteMsg::clear_has_detach() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WriteMsg::clear_detach() {
  if (detach_ != NULL) detach_->::Serialization::DetachRequest::Clear();
  clear_has_detach();
}
inline const ::Serialization::DetachRequest& WriteMsg::detach() const {
  return detach_ != NULL ? *detach_ : *default_instance_->detach_;
}
inline ::Serialization::DetachRequest* WriteMsg::mutable_detach() {
  set_has_detach();
  if (detach_ == NULL) detach_ = new ::Serialization::DetachRequest;
  return detach_;
}
inline ::Serialization::DetachRequest* WriteMsg::release_detach() {
  clear_has_detach();
  ::Serialization::DetachRequest* temp = detach_;
  detach_ = NULL;
  return temp;
}

// optional .Serialization.AcceptMsg accepted = 11;
inline bool WriteMsg::has_accepted() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WriteMsg::set_has_accepted() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WriteMsg::clear_has_accepted() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WriteMsg::clear_accepted() {
  if (accepted_ != NULL) accepted_->::Serialization::AcceptMsg::Clear();
  clear_has_accepted();
}
inline const ::Serialization::AcceptMsg& WriteMsg::accepted() const {
  return accepted_ != NULL ? *accepted_ : *default_instance_->accepted_;
}
inline ::Serialization::AcceptMsg* WriteMsg::mutable_accepted() {
  set_has_accepted();
  if (accepted_ == NULL) accepted_ = new ::Serialization::AcceptMsg;
  return accepted_;
}
inline ::Serialization::AcceptMsg* WriteMsg::release_accepted() {
  clear_has_accepted();
  ::Serialization::AcceptMsg* temp = accepted_;
  accepted_ = NULL;
  return temp;
}

// optional int32 errorcode = 12;
inline bool WriteMsg::has_errorcode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WriteMsg::set_has_errorcode() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WriteMsg::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WriteMsg::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 WriteMsg::errorcode() const {
  return errorcode_;
}
inline void WriteMsg::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// optional string errortxt = 13;
inline bool WriteMsg::has_errortxt() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void WriteMsg::set_has_errortxt() {
  _has_bits_[0] |= 0x00001000u;
}
inline void WriteMsg::clear_has_errortxt() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void WriteMsg::clear_errortxt() {
  if (errortxt_ != &::google::protobuf::internal::kEmptyString) {
    errortxt_->clear();
  }
  clear_has_errortxt();
}
inline const ::std::string& WriteMsg::errortxt() const {
  return *errortxt_;
}
inline void WriteMsg::set_errortxt(const ::std::string& value) {
  set_has_errortxt();
  if (errortxt_ == &::google::protobuf::internal::kEmptyString) {
    errortxt_ = new ::std::string;
  }
  errortxt_->assign(value);
}
inline void WriteMsg::set_errortxt(const char* value) {
  set_has_errortxt();
  if (errortxt_ == &::google::protobuf::internal::kEmptyString) {
    errortxt_ = new ::std::string;
  }
  errortxt_->assign(value);
}
inline void WriteMsg::set_errortxt(const char* value, size_t size) {
  set_has_errortxt();
  if (errortxt_ == &::google::protobuf::internal::kEmptyString) {
    errortxt_ = new ::std::string;
  }
  errortxt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WriteMsg::mutable_errortxt() {
  set_has_errortxt();
  if (errortxt_ == &::google::protobuf::internal::kEmptyString) {
    errortxt_ = new ::std::string;
  }
  return errortxt_;
}
inline ::std::string* WriteMsg::release_errortxt() {
  clear_has_errortxt();
  if (errortxt_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errortxt_;
    errortxt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialization

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Serialization::WriteMsg_MsgType>() {
  return ::Serialization::WriteMsg_MsgType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_serialization_2eproto__INCLUDED
