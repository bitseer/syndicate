# build jsyndicatefs.so for JNI

import os
import sys

def guess_include_path(env, name, subdir):
   print "  Guessing", name, "include path...",
   if env['platform'] == 'windows':
      path = [os.path.join(os.path.join(env['mingwlibsdir'], 'include'), subdir)]
      path += [os.path.abspath(os.path.join(os.path.join(env['mingwlibsdir'], 'include'), subdir))]
      # Everything lives in mingwlibs anyway...
      if os.environ.has_key('MINGDIR'):
         path += [os.path.join(os.path.join(os.environ['MINGDIR'], 'include'), subdir)]
   elif env['platform'] == 'darwin':
      path = [os.path.join('/opt/local/include', subdir)]
   elif env['platform'] == 'freebsd':
      path = [os.path.join('/usr/local/include', subdir)]
   else:
      path = [os.path.join('/usr/include', subdir)]
   env.AppendUnique(CPPPATH = path)
   for f in path:
      print f,
   print ''

def check_java(env):
   print "Checking for Java includes ...",
   if env.has_key('javapath') and env['javapath']:
      env.AppendUnique(CPPPATH = [env['javapath']])
      env.AppendUnique(CPPPATH = [os.path.join(env['javapath'], "linux")])
      return
   if env.has_key('platform') and env['platform'] == 'windows':
      guess_include_path(env, 'Java', 'java')
      return
   possible_dirs = []
   for root in ["/usr/local/lib/jvm", "/usr/local/lib64/jvm", "/usr/lib/jvm", "/usr/lib64/jvm", "/usr/java"]:
      if os.path.exists(root) and os.path.isdir(root):
         dirs = os.listdir(root)
         for dir in dirs:
            testdir = os.path.join(root, dir, "include")
            if dir[0] != '.' and os.path.exists(os.path.join(testdir, "jni.h")):
               possible_dirs += [testdir]
   if len(possible_dirs) == 0:
      print "not found"
   else:
      possible_dirs.sort()
      print possible_dirs[-1]
      env.AppendUnique(CPPPATH = [possible_dirs[-1]])
      env.AppendUnique(CPPPATH = [os.path.join(possible_dirs[-1], "linux")])


# add additional source files here
source_files = """
   JSyndicateFSJni.cpp
   JSyndicateFS.cpp
   JSyndicateFSConfig.cpp
   JSyndicateFSContext.cpp
   JSyndicateFSFileInfo.cpp
   JSyndicateFSFillDir.cpp
   JSyndicateFSStat.cpp
   JSyndicateFSStatvfs.cpp
   JSyndicateFSUtimbuf.cpp
"""

dependent_source_files = """
   ../../UG/collator.cpp
   ../../UG/http-common.cpp
   ../../UG/log.cpp
   ../../UG/replication.cpp
   ../../UG/stats.cpp
   ../../UG/syndicate.cpp
   ../../UG/fs/close.cpp
   ../../UG/fs/closedir.cpp
   ../../UG/fs/consistency.cpp
   ../../UG/fs/fs_entry.cpp
   ../../UG/fs/link.cpp
   ../../UG/fs/manifest.cpp
   ../../UG/fs/mkdir.cpp
   ../../UG/fs/mkfs.cpp
   ../../UG/fs/network.cpp
   ../../UG/fs/open.cpp
   ../../UG/fs/opendir.cpp
   ../../UG/fs/read.cpp
   ../../UG/fs/readdir.cpp
   ../../UG/fs/recover.cpp
   ../../UG/fs/rename.cpp
   ../../UG/fs/rmdir.cpp
   ../../UG/fs/stat.cpp
   ../../UG/fs/storage.cpp
   ../../UG/fs/trunc.cpp
   ../../UG/fs/unlink.cpp
   ../../UG/fs/url.cpp
   ../../UG/fs/write.cpp
   ../../UG/fs/xattr.cpp
"""

# add source file search paths here
CPPPATH = """
   ../
   ../../UG/
   ../../UG/fs/
   #libsyndicate/
   #build/out/protobufs/
   /usr/include/syndicate
"""

# add library paths here
LIBPATH = """
   #build/out/libsyndicate/
"""

# add libraries here
LIBS = """
   curl
   pthread
   crypto
   microhttpd
   syndicate
   protobuf
"""

# add additional CPPFLAGS here
CPPFLAGS = ""


# get our environment
Import('env')
env = env.Clone()

# add java include headers
check_java(env)

env.Append(LIBS = Split(LIBS))
env.Append(LIBPATH = Split(LIBPATH))
env.Append(CPPPATH = Split(CPPPATH))
env.Append(CPPFLAGS = Split(CPPFLAGS))

# generate the shared library
libjsyndicatefs = env.SharedLibrary( target="libjsyndicatefs.so", source=[Split(source_files), Split(dependent_source_files)] )

Return( 'libjsyndicatefs' )

