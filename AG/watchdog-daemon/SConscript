# build libAGshelldriver.so

import os

# add additional source files here
wd_daemon_source = """
   daemon-config.cpp
   wdd-main.cpp
   thrift/cpp/WDDaemon.cpp
   thrift/cpp/WDDaemon_server.cpp
   thrift/cpp/wd_daemon_constants.cpp
   thrift/cpp/wd_daemon_types.cpp
   thrift/cpp/common_types.cpp
   thrift/cpp/common_constants.cpp
"""

ag_daemon_source = """
   daemon-config.cpp
   agd-main.cpp
   thrift/cpp/AGDaemon.cpp
   thrift/cpp/AGDaemon_server.cpp
   thrift/cpp/ag_daemon_constants.cpp
   thrift/cpp/ag_daemon_types.cpp
   thrift/cpp/common_types.cpp
   thrift/cpp/common_constants.cpp
"""

# add source file search paths here
CPPPATH = """
   /usr/include/thrift
   #AG/watchdog-daemon
   #AG/watchdog-daemon/thrift/cpp
"""

# add library paths here
LIBPATH = """
"""

# add libraries here
LIBS = """
    libthrift
    config++
"""

# add additional CPPFLAGS here
CPPFLAGS = """
    -g 
    -DHAVE_NETINET_IN_H 
    -DHAVE_INTTYPES_H
"""


# get our environment
Import('env')
env = env.Clone()

env.Append(LIBS = Split(LIBS))
env.Append(CPPPATH = Split(CPPPATH))
env.Append(CPPFLAGS = Split(CPPFLAGS))
env.Append(LIBPATH = Split(LIBPATH))

wd_daemon_obj = env.Object( source=Split(wd_daemon_source) )
ag_daemon_obj = env.Object( source=Split(ag_daemon_source) )

# generate the shared library
wd_daemon = env.Program("wd-daemon", source=[wd_daemon_obj])
ag_daemon = env.Program("ag-daemon", source=[ag_daemon_obj])

Return( 'ag_daemon wd_daemon' )

