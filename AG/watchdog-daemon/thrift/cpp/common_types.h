/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef common_TYPES_H
#define common_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace watchdog {

typedef struct _AGDaemonID__isset {
  _AGDaemonID__isset() : addr(false), port(false), frequency(false) {}
  bool addr;
  bool port;
  bool frequency;
} _AGDaemonID__isset;

class AGDaemonID {
 public:

  static const char* ascii_fingerprint; // = "52F7D5E8217C4B8FC14F1F30BF2EB41C";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0xF7,0xD5,0xE8,0x21,0x7C,0x4B,0x8F,0xC1,0x4F,0x1F,0x30,0xBF,0x2E,0xB4,0x1C};

  AGDaemonID() : addr(""), port(""), frequency(0) {
  }

  virtual ~AGDaemonID() throw() {}

  std::string addr;
  std::string port;
  int16_t frequency;

  _AGDaemonID__isset __isset;

  void __set_addr(const std::string& val) {
    addr = val;
  }

  void __set_port(const std::string& val) {
    port = val;
  }

  void __set_frequency(const int16_t val) {
    frequency = val;
  }

  bool operator == (const AGDaemonID & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(frequency == rhs.frequency))
      return false;
    return true;
  }
  bool operator != (const AGDaemonID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AGDaemonID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
