#!/usr/bin/python

from SMDS.method import Method
from SMDS.content import *
from SMDS.user import *
from SMDS.mdserver import *
from SMDS.parameter import *
from SMDS.auth import Auth
from SMDS.faults import *

class DeleteUser( Method ):
   """
   Remove a user account.  A user may remove himself/herself, but no one else.  An admin may remove anyone.
   All of the user's registered content and metadata servers will be removed as well.  The user will be
   removed from all metadata servers.
   """
   
   accepts = [
         Auth(),
         Parameter(Mixed(Parameter(int, "User ID of the user to be removed"),
                         Parameter(str, "Username of the user to be removed"))),
   ]
   
   roles = ['admin', 'user']
   returns = Parameter(int, "1 if successful")
   
   def call(self, auth, username_or_id ):
      assert self.caller is not None
      
      roles = self.caller.roles
      
      user = None
      try:
         if isinstance(username_or_id, str):
            users = Users({'username':username_or_id})
         else:
            users = Users({'user_id':username_or_id})
         
         user = users[0]
      except Exception, e:
         raise MDObjectNotFound( 'User(%s)' % (username_or_id), str(e) )
      
      
      # user can only delete himself/herself, unless admin
      if ('admin' not in roles) and user['username'] != auth['Username']:
         raise MDUnauthorized( "User(%s) cannot be deleted by User(%s)" % (username_or_id, auth['Username']) )
      
      # unregister this user from every metadata server it's subscribed to
      for md_id in user['reg_mdserver_ids']:
         md = None
         try:
            mds = MDServers( self.api, {'server_id': md_id} )
            md = mds[0]
         except:
            continue
         
         try:
            md['users'].remove( user['user_id'] )
            md.sync()
         except MDException, mde:
            raise MDMethodFailed( "Could not remove User(%s) from MDServer(%s)" % (user['username'], md_id), mde )
         except Exception, e:
            pass
         
      
      # unregister all other users from each of the user's metadata servers and delete them
      registered_mds = MDServers( self.api, {'owner': user['user_id']} )
      for md in registered_mds:
         for user_id in md['users']:
            md_user = None
            try:
               md_users = User( self.api, {'user_id': user_id} )
               md_user = md_users[0]
            except:
               continue
            
            if md['server_id'] in md_user['reg_mdserver_ids']:
               md_user['reg_mdserver_ids'].remove( md['server_id'] )
               md_user.sync()
          
          rc = md.shutdown()
          if rc != 1:
             logger.error( "Could not shut down MDServer(%s)" % md['server_id'] )
             
          md.delete()
      
      # unregister each content owned by this user from the CDN, and delete the content
      registered_contents = Contents( self.api, {'owner': user['user_id']} )
      for c in registered_contents:
         rc = self.api.cdn.rm_content( c )
         if rc != 1:
            logger.error( "Could not unregister Content(%s,%s)" % (c['content_id'], c['host_url']) )
         
         c.delete()
         
      
      # unregister this user on the CDN
      rc = self.api.cdn.rm_user( user )
      user.delete()
      
      return rc
      