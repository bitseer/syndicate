#!/usr/bin/python

from SMDS.method import Method
from SMDS.mdserver import *
from SMDS.user import *
from SMDS.mdserver import *
from SMDS.parameter import *
from SMDS.auth import Auth
from SMDS.faults import *

class DeleteMetadataServer( Method ):
   """
   Delete a metadata server.  This will also stop it.  Unregister all other users from this server.
   The caller can delete only their own metadata servers, unless they are an admin.
   """
   
   accepts = [
         Auth(),
         MDServer.fields['server_id']
   ]
   rules = ['admin','user']
   returns = Parameter(int, "1 if successful; otherwise a negative error code resulting from a failure to shut down the metadata server")
   
   def call(self, auth, mdserver_id):
      roles = []
      if self.caller:
         roles = self.caller.roles
         
      # look up the user
      user = None
      try:
         users = Users( self.api, {'username': auth['Username']} )
         user = users[0]
      except Exception, e:
         raise MDObjectNotFound( "User(%s)" % auth['Username'], str(e) )
      
      # sanity check
      if mdserver_id not in user['mdserver_ids']:
         raise MDInvalidArgument( "MDServer(%s) is not owned by User(%s)" % (mdserver_id, auth['Username']) )
      
      # look up the mdserver
      md = None
      try:
         mds = MDServers( self.api, {'server_id': mdserver_id} )
         md = mds[0]
      except Exception, e:
         raise MDObjectNotFound( "MDServer(%s)" % (mdserver_id), str(e) )
      
      # if we're not an admin and we don't own this server, then we're unauthorized
      if (self.caller == None or 'admin' not in roles) and user['user_id'] != md['owner']:
         raise MDUnauthorized( "User(%s) is not allowed to delete MDServer(%s)" % (auth['Username'], mdserver_id) )
      
      # do the deletion
      user['mdserver_ids'].remove( mdserver_id )
      user.sync()
      
      # unregister all users from this server
      for user_id in md['users']:
         md_user = None
         try:
            md_users = Users( self.api, {'user_id': user_id} )
            md_user = md_users[0]
         except:
            continue
         
         try:
            md_user['reg_mdserver_ids'].remove( mdserver_id )
            md_user.sync()
         except MDException, mde:
            raise MDMethodFailed( "Could not remove User(%s) from MDServer(%s)" % (user['username'], mdserver_id), mde )
         except Exception, e:
            pass
         
      
      rc = md.shutdown()
      md.delete()
      
      return rc