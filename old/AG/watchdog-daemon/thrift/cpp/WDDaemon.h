/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef WDDaemon_H
#define WDDaemon_H

#include <TProcessor.h>
#include "wd_daemon_types.h"

namespace watchdog {

class WDDaemonIf {
 public:
  virtual ~WDDaemonIf() {}
  virtual void pulse(const int32_t id, const std::set<int32_t> & live_set, const std::set<int32_t> & dead_set) = 0;
  virtual int32_t register_agd(const  ::watchdog::AGDaemonID& agdid) = 0;
  virtual int32_t unregister_agd(const int32_t id) = 0;
};

class WDDaemonIfFactory {
 public:
  typedef WDDaemonIf Handler;

  virtual ~WDDaemonIfFactory() {}

  virtual WDDaemonIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(WDDaemonIf* /* handler */) = 0;
};

class WDDaemonIfSingletonFactory : virtual public WDDaemonIfFactory {
 public:
  WDDaemonIfSingletonFactory(const boost::shared_ptr<WDDaemonIf>& iface) : iface_(iface) {}
  virtual ~WDDaemonIfSingletonFactory() {}

  virtual WDDaemonIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(WDDaemonIf* /* handler */) {}

 protected:
  boost::shared_ptr<WDDaemonIf> iface_;
};

class WDDaemonNull : virtual public WDDaemonIf {
 public:
  virtual ~WDDaemonNull() {}
  void pulse(const int32_t /* id */, const std::set<int32_t> & /* live_set */, const std::set<int32_t> & /* dead_set */) {
    return;
  }
  int32_t register_agd(const  ::watchdog::AGDaemonID& /* agdid */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t unregister_agd(const int32_t /* id */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _WDDaemon_pulse_args__isset {
  _WDDaemon_pulse_args__isset() : id(false), live_set(false), dead_set(false) {}
  bool id;
  bool live_set;
  bool dead_set;
} _WDDaemon_pulse_args__isset;

class WDDaemon_pulse_args {
 public:

  WDDaemon_pulse_args() : id(0) {
  }

  virtual ~WDDaemon_pulse_args() throw() {}

  int32_t id;
  std::set<int32_t>  live_set;
  std::set<int32_t>  dead_set;

  _WDDaemon_pulse_args__isset __isset;

  void __set_id(const int32_t val) {
    id = val;
  }

  void __set_live_set(const std::set<int32_t> & val) {
    live_set = val;
  }

  void __set_dead_set(const std::set<int32_t> & val) {
    dead_set = val;
  }

  bool operator == (const WDDaemon_pulse_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(live_set == rhs.live_set))
      return false;
    if (!(dead_set == rhs.dead_set))
      return false;
    return true;
  }
  bool operator != (const WDDaemon_pulse_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WDDaemon_pulse_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WDDaemon_pulse_pargs {
 public:


  virtual ~WDDaemon_pulse_pargs() throw() {}

  const int32_t* id;
  const std::set<int32_t> * live_set;
  const std::set<int32_t> * dead_set;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WDDaemon_pulse_result {
 public:

  WDDaemon_pulse_result() {
  }

  virtual ~WDDaemon_pulse_result() throw() {}


  bool operator == (const WDDaemon_pulse_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WDDaemon_pulse_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WDDaemon_pulse_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WDDaemon_pulse_presult {
 public:


  virtual ~WDDaemon_pulse_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WDDaemon_register_agd_args__isset {
  _WDDaemon_register_agd_args__isset() : agdid(false) {}
  bool agdid;
} _WDDaemon_register_agd_args__isset;

class WDDaemon_register_agd_args {
 public:

  WDDaemon_register_agd_args() {
  }

  virtual ~WDDaemon_register_agd_args() throw() {}

   ::watchdog::AGDaemonID agdid;

  _WDDaemon_register_agd_args__isset __isset;

  void __set_agdid(const  ::watchdog::AGDaemonID& val) {
    agdid = val;
  }

  bool operator == (const WDDaemon_register_agd_args & rhs) const
  {
    if (!(agdid == rhs.agdid))
      return false;
    return true;
  }
  bool operator != (const WDDaemon_register_agd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WDDaemon_register_agd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WDDaemon_register_agd_pargs {
 public:


  virtual ~WDDaemon_register_agd_pargs() throw() {}

  const  ::watchdog::AGDaemonID* agdid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WDDaemon_register_agd_result__isset {
  _WDDaemon_register_agd_result__isset() : success(false) {}
  bool success;
} _WDDaemon_register_agd_result__isset;

class WDDaemon_register_agd_result {
 public:

  WDDaemon_register_agd_result() : success(0) {
  }

  virtual ~WDDaemon_register_agd_result() throw() {}

  int32_t success;

  _WDDaemon_register_agd_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const WDDaemon_register_agd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WDDaemon_register_agd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WDDaemon_register_agd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WDDaemon_register_agd_presult__isset {
  _WDDaemon_register_agd_presult__isset() : success(false) {}
  bool success;
} _WDDaemon_register_agd_presult__isset;

class WDDaemon_register_agd_presult {
 public:


  virtual ~WDDaemon_register_agd_presult() throw() {}

  int32_t* success;

  _WDDaemon_register_agd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WDDaemon_unregister_agd_args__isset {
  _WDDaemon_unregister_agd_args__isset() : id(false) {}
  bool id;
} _WDDaemon_unregister_agd_args__isset;

class WDDaemon_unregister_agd_args {
 public:

  WDDaemon_unregister_agd_args() : id(0) {
  }

  virtual ~WDDaemon_unregister_agd_args() throw() {}

  int32_t id;

  _WDDaemon_unregister_agd_args__isset __isset;

  void __set_id(const int32_t val) {
    id = val;
  }

  bool operator == (const WDDaemon_unregister_agd_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const WDDaemon_unregister_agd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WDDaemon_unregister_agd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WDDaemon_unregister_agd_pargs {
 public:


  virtual ~WDDaemon_unregister_agd_pargs() throw() {}

  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WDDaemon_unregister_agd_result__isset {
  _WDDaemon_unregister_agd_result__isset() : success(false) {}
  bool success;
} _WDDaemon_unregister_agd_result__isset;

class WDDaemon_unregister_agd_result {
 public:

  WDDaemon_unregister_agd_result() : success(0) {
  }

  virtual ~WDDaemon_unregister_agd_result() throw() {}

  int32_t success;

  _WDDaemon_unregister_agd_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const WDDaemon_unregister_agd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WDDaemon_unregister_agd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WDDaemon_unregister_agd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WDDaemon_unregister_agd_presult__isset {
  _WDDaemon_unregister_agd_presult__isset() : success(false) {}
  bool success;
} _WDDaemon_unregister_agd_presult__isset;

class WDDaemon_unregister_agd_presult {
 public:


  virtual ~WDDaemon_unregister_agd_presult() throw() {}

  int32_t* success;

  _WDDaemon_unregister_agd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class WDDaemonClient : virtual public WDDaemonIf {
 public:
  WDDaemonClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  WDDaemonClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void pulse(const int32_t id, const std::set<int32_t> & live_set, const std::set<int32_t> & dead_set);
  void send_pulse(const int32_t id, const std::set<int32_t> & live_set, const std::set<int32_t> & dead_set);
  void recv_pulse();
  int32_t register_agd(const  ::watchdog::AGDaemonID& agdid);
  void send_register_agd(const  ::watchdog::AGDaemonID& agdid);
  int32_t recv_register_agd();
  int32_t unregister_agd(const int32_t id);
  void send_unregister_agd(const int32_t id);
  int32_t recv_unregister_agd();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class WDDaemonProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<WDDaemonIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (WDDaemonProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_pulse(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_register_agd(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unregister_agd(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  WDDaemonProcessor(boost::shared_ptr<WDDaemonIf> iface) :
    iface_(iface) {
    processMap_["pulse"] = &WDDaemonProcessor::process_pulse;
    processMap_["register_agd"] = &WDDaemonProcessor::process_register_agd;
    processMap_["unregister_agd"] = &WDDaemonProcessor::process_unregister_agd;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~WDDaemonProcessor() {}
};

class WDDaemonProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  WDDaemonProcessorFactory(const ::boost::shared_ptr< WDDaemonIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< WDDaemonIfFactory > handlerFactory_;
};

class WDDaemonMultiface : virtual public WDDaemonIf {
 public:
  WDDaemonMultiface(std::vector<boost::shared_ptr<WDDaemonIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~WDDaemonMultiface() {}
 protected:
  std::vector<boost::shared_ptr<WDDaemonIf> > ifaces_;
  WDDaemonMultiface() {}
  void add(boost::shared_ptr<WDDaemonIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void pulse(const int32_t id, const std::set<int32_t> & live_set, const std::set<int32_t> & dead_set) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->pulse(id, live_set, dead_set);
    }
  }

  int32_t register_agd(const  ::watchdog::AGDaemonID& agdid) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->register_agd(agdid);
      } else {
        ifaces_[i]->register_agd(agdid);
      }
    }
  }

  int32_t unregister_agd(const int32_t id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->unregister_agd(id);
      } else {
        ifaces_[i]->unregister_agd(id);
      }
    }
  }

};

} // namespace

#endif
