//
//   Copyright 2013 The Trustees of Princeton University
//   All Rights Reserved
//

package Serialization;

message FileMetadata {
   required string fs_path = 8;
   required uint64 volume_id = 1;
   required uint64 gateway_id = 2;
   required uint64 file_id = 3;
   required int64 file_version = 4;
   required int64 size = 5;
   required int64 mtime_sec = 6;
   required int32 mtime_nsec = 7;
}

message BlockList {
   required uint64 start_id = 1;
   required uint64 end_id = 2;
   repeated int64 version = 3;
}

// a block of data to write
message BlockData {
   required uint64 volume_id = 1;
   required uint64 gateway_id = 2;
   required uint64 file_id = 3;
   required int64 file_version = 4;
   required uint64 block_id = 5;
   required int64 block_version = 6;
   required string data = 7;
   required string fs_path = 8;
}

// truncate a file
message TruncateRequest {
   required uint64 volume_id = 1;
   required uint64 gateway_id = 2;
   required uint64 file_id = 3;
   required int64 file_version = 4;
   required int64 size = 5;
   required string fs_path = 6;
}

// detach a file or directory
message DetachRequest {
   required uint64 volume_id = 1;
   required uint64 gateway_id = 2;
   required uint64 file_id = 3;
   required int64 file_version = 4;
   required string fs_path = 5;
}

// block url set (for manifests)
message BlockURLSetMsg {
   required uint64 gateway_id = 1;
   required uint64 start_id = 2;
   required uint64 end_id = 3;
   repeated int64 block_versions = 4;
}

// manifest
message ManifestMsg {
   required uint64 volume_id = 1;
   required uint64 gateway_id = 2;
   required uint64 file_id = 3;
   required int64 file_version = 4;
   required int64 size = 5;
   required int64 mtime_sec = 6;
   required int32 mtime_nsec = 7;
   repeated BlockURLSetMsg block_url_set = 8;
   required string signature = 9;       // signature of this message using the origin gateway's private key
}

// accepted message
message AcceptMsg {
   required string fs_path = 4;
   required int64 file_version = 1;
   repeated uint64 block_id = 2;
   repeated int64 block_version = 3;
}

// PREPARE message uses FileMetadata and BlockList
// PROMISE message uses nothing--it's an acknowledgement to a PREPARE message
// ACCEPTED message uses AcceptMsg
// TRUNCATE message uses TruncateRequest and BlockList
// DETACH message uses DetachRequest

message WriteMsg {
   
   enum MsgType {
      PREPARE = 1;
      PROMISE = 2;
      ACCEPT = 3;
      ACCEPTED = 4;
      BLOCKDATA = 5;
      TRUNCATE = 6;
      DETACH = 7;

      ERROR = 8;
   }

   required uint64 volume_version = 1;    // what is the known volume metadata version on the sender
   required uint64 UG_version = 2;        // what is the known UG metadata version on the sender
   required uint64 RG_version = 3;        // what is the known RG metadata version on the sender
   required uint64 AG_version = 4;        // what is the known AG metadata version on the sender
   
   required MsgType type = 5;             // what type of message
   required uint64 user_id = 6;           // what user is running this gateway
   required uint64 volume_id = 7;         // what volume is the sender in
   required uint64 gateway_id = 8;        // who's sending this message

   optional FileMetadata metadata = 9;
   optional BlockList blocks = 10;
   optional BlockData blockdata = 11;
   optional TruncateRequest truncate = 12;
   optional DetachRequest detach = 13;
   optional AcceptMsg accepted = 14;

   optional int32 errorcode = 15;
   optional string errortxt = 16;

   required string signature = 17;     // cryptographic signature with the gateway's private key
}

