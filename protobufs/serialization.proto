/*
   Copyright 2013 The Trustees of Princeton University

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

package Serialization;

message FileMetadata {
   required string fs_path = 9;
   required uint64 volume_id = 1;
   required uint64 coordinator_id = 2;
   required uint64 file_id = 3;
   required int64 file_version = 4;
   required int64 size = 5;
   required int64 write_nonce = 6;
}

// single block 
message BlockInfo {
   required uint64 block_id = 1;
   required int64 block_version = 2;
   required bytes hash = 3;
}

// block served from an AG.
// the AG versions and signs blocks on the fly.
message AG_Block {
   required bytes data = 1;
   required uint64 file_id = 2;
   required int64 file_version = 3;
   required uint64 block_id = 4;
   required int64 block_version = 5;
   required string signature = 6;
}

// truncate a file
message TruncateRequest {
   required uint64 volume_id = 1;
   required uint64 coordinator_id = 2;
   required uint64 file_id = 3;
   required int64 file_version = 4;
   required int64 size = 5;
   required string fs_path = 6;
}

// detach a file or directory
message DetachRequest {
   required uint64 volume_id = 1;
   required uint64 coordinator_id = 2;
   required uint64 file_id = 3;
   required int64 file_version = 4;
   required string fs_path = 5;
}

// block url set (for manifests)
message BlockURLSetMsg {
   required uint64 gateway_id = 1;              // if this is a cert bundle, then this is the gateway ID
   required uint64 start_id = 2;                // if this is a cert bundle, then this is the gateway type
   required uint64 end_id = 3;                  // if this is a cert bundle, then this is the gateway's caps
   repeated int64 block_versions = 4;           // block version list 
   repeated bytes block_hashes = 5;            // block hash list (must be same length as versions, unless served from an AG (in which case this is optional))
}

// manifest
message ManifestMsg {
   required uint64 volume_id = 1;
   required uint64 coordinator_id = 2;      // if 0, this is a cert bundle from the MS
   required uint64 owner_id = 3;
   required uint64 file_id = 4;
   required int64 file_version = 5;
   required int64 size = 6;             // if gateway_id == 0, then this is simply the number of certificates
   required int64 mtime_sec = 7;        // manifest modtime
   required int32 mtime_nsec = 8;
   required int64 fent_mtime_sec = 9;   // associated fs_entry modtime
   required int32 fent_mtime_nsec = 10;
   repeated BlockURLSetMsg block_url_set = 11;
   
   optional int32 errorcode = 12;
   optional string errortxt = 13;
   
   required string signature = 14;       // base64-encoded signature of this message using the origin gateway's private key
}

// accepted message
message AcceptMsg {
   required string fs_path = 7;
   required uint64 volume_id = 1;
   required uint64 coordinator_id = 2;
   required uint64 file_id = 3;
   required int64 file_version = 4;
   repeated uint64 block_id = 5;
   repeated int64 block_version = 6;
}

// rename message
message RenameMsg {
   required uint64 volume_id = 1;
   required uint64 coordinator_id = 2;
   required uint64 file_id = 3;
   required uint64 file_version = 4;
   required string old_fs_path = 5;
   required string new_fs_path = 6;
}

// WRITE message uses FileMetadata and BlockList
// PROMISE message uses nothing--it's an acknowledgement to a PREPARE message
// ACCEPTED message uses AcceptMsg
// TRUNCATE message uses TruncateRequest and BlockList
// DETACH message uses DetachRequest

message WriteMsg {
   
   enum MsgType {
      WRITE = 1;
      ACCEPTED = 4;
      TRUNCATE = 5;
      DETACH = 6;
      RENAME = 7;

      ERROR = 8;
   }

   required uint64 volume_version = 1;    // what is the known volume metadata version on the sender
   required uint64 cert_version = 2;      // what is the known certificate bundle version on the sender
   
   required MsgType type = 3;             // what type of message
   required uint64 user_id = 4;           // what user is running this gateway
   required uint64 volume_id = 5;         // what volume is the sender in
   required uint64 gateway_id = 6;        // who's sending this message

   optional FileMetadata metadata = 7;
   repeated BlockInfo blocks = 8;
   optional TruncateRequest truncate = 9;
   optional DetachRequest detach = 10;
   optional AcceptMsg accepted = 11;
   optional RenameMsg rename = 12;

   optional int32 errorcode = 13;
   optional string errortxt = 14;

   required string signature = 15;     // cryptographic signature with the gateway's private key
}

