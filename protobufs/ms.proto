//
//   Copyright 2013 The Trustees of Princeton University
//   All Rights Reserved
//


package ms;

// filesystem entry
message ms_entry {
   enum FileType {
      MS_ENTRY_TYPE_FILE = 1;
      MS_ENTRY_TYPE_DIR = 2;
   }

   required int32 type = 1;
   required uint64 file_id = 2;
   required int64 ctime_sec = 3;
   required int64 ctime_nsec = 4;
   required int64 mtime_sec = 5;
   required int32 mtime_nsec = 6;
   required uint64 owner = 7;
   required uint64 coordinator = 8;
   required uint64 volume = 9;
   required int32 mode = 10;
   required int64 size = 11;
   required int64 version = 12;
   required int32 max_read_freshness = 13;
   required int32 max_write_freshness = 14;
   required string name = 15;
   
   optional int64 write_nonce = 16;
   
   optional uint64 parent_id = 17;
   optional string parent_name = 18;
}

// object update
message ms_update {
   enum UpdateType {
      CREATE = 1;
      UPDATE = 2;
      DELETE = 3;
   }

   required int32 type = 1;
   required ms_entry entry = 2;
}

// collection of object updates
message ms_updates {
   required string signature = 1;
   repeated ms_update updates = 2;
}

// ms directory listing
message ms_listing {
   enum ListingType {
      NONE = 0;
      NEW = 1;
      NOT_MODIFIED = 2;
   }

   required int32 status = 1;
   required int32 ftype = 2;
   repeated ms_entry entries = 3;
}

// metadata information for the entries of a path
message ms_reply {
   required uint64 volume_version = 1;           // version of this volume's metadata
   required uint64 UG_version = 2;               // version of this volume's UGs
   required uint64 RG_version = 3;               // version of this volume's RGs
   required uint64 AG_version = 4;               // version of this volume's AGs
   required string signature = 5;                // Volume signature
   required ms_listing listing = 6;
   required int32 error = 7;
   optional string errormsg = 8;
}

// metadata information on a block
message ms_gateway_blockinfo {
   required uint64 file_id = 1;           // ID of this file
   required int64 file_version = 2;       // version of this file 
   required uint64 block_id = 3;          // ID of the block
   required int64 block_version = 4;      // version of he block
   required uint64 blocking_factor = 5;   // size of the block
   required int64 file_mtime_sec = 6;     // time of the write on the UG that created this block (seconds)
   required int32 file_mtime_nsec = 7;    // time of the write on the UG that created this block (nanoseconds)
   required uint64 owner = 8;             // ID of the SyndicateUser that owns this file
   required uint64 writer = 9;            // ID of the UG that created this message
   required uint64 volume = 10;           // ID of the Volume that this file/UG belong to
   required string hash = 11;             // secure hash (SHA256) of the block bits
   required string signature = 12;        // signature of this message, from the sender gateway's operator's private key
}


// volume gateway credential set.  Lets gateways authenticate to the MS
message ms_volume_gateway_cred {
   required uint64 owner_id = 1;          // ID of user that owns this gateway
   required uint64 gateway_id = 2;        // ID of this gateway
   required string name = 3;              // name of gateway
   required string host = 4;              // hostname of this gateway
   required int32 port = 5;               // port number of this gateway
   required string public_key = 6;        // public key of this gateway
}

// UGs
message ms_volume_UGs {
   required uint64 ug_version = 1;
   required string signature = 2;                  // base64-encoded Volume signature of this message
   repeated ms_volume_gateway_cred ug_creds = 3;  // session credentials for the other write-capable UGs in this Volume
}

// RGs
message ms_volume_RGs {
   required uint64 rg_version = 1;
   required string signature = 2;      // base64-encoded Volume signature of this message
   repeated string rg_hosts = 3;
   repeated int32 rg_ports = 4;
}

// AGs
message ms_volume_AGs {
   required uint64 ag_version = 1;
   required string signature = 2;
   repeated uint64 ag_ids = 3;
   repeated uint64 ag_blocksizes = 4;
   repeated string hostnames = 5;
   repeated int32 portnums = 6;
}

// Volume metadata
message ms_volume_metadata {
   required uint64 blocksize = 1;
   required uint64 owner_id = 2;               // UID of the volume owner
   required uint64 volume_id = 3;             // volume ID
   required uint64 volume_version = 4;
   required uint64 UG_version = 5;
   required uint64 RG_version = 6;
   required uint64 AG_version = 7;
   required uint64 num_files = 8;
   required string name = 9;
   required string description = 10;
   required string volume_public_key = 11;
   required string signature = 12;              // base64-encoded Volume signature of this message

   optional ms_volume_UGs ugs = 13;         // ug information (included only on registration)
   optional ms_volume_RGs rgs = 14;         // rg information (included only on registration)
   optional ms_volume_AGs ags = 15;          // ag information (included only on registration)
   optional ms_entry root = 16;             // root directory
}


// Registration metadata
message ms_registration_metadata {
   required ms_volume_gateway_cred cred = 1;   // session credentials for the requester
   required string session_password = 2;       // temporary password the gateway should use in the future to authenticate to the MS
   required int64 session_timeout = 3;       // how long is the above information good for?

   repeated ms_volume_metadata volumes = 4;     // the Volumes we're subscribed to
}


// OpenID authentication response
message ms_openid_provider_reply {
   required string redirect_url = 1;
   required string auth_handler = 2;
   required string username_field = 3;
   required string password_field = 4;
   required string extra_args = 5;
   required string challenge_method = 6;
   required string response_method = 7;
   required string redirect_method = 8;
}

