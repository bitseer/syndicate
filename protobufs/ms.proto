/*
   Copyright 2013 The Trustees of Princeton University

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

package ms;

// filesystem entry message
message ms_entry {
   enum FileType {
      MS_ENTRY_TYPE_NONE = 0;
      MS_ENTRY_TYPE_FILE = 1;
      MS_ENTRY_TYPE_DIR = 2;
   }

   required int32 type = 1;
   required uint64 file_id = 2;
   required int64 ctime_sec = 3;
   required int64 ctime_nsec = 4;
   required int64 mtime_sec = 5;
   required int32 mtime_nsec = 6;
   required int64 manifest_mtime_sec = 7;
   required int32 manifest_mtime_nsec = 8;
   required uint64 owner = 9;
   required uint64 coordinator = 10;
   required uint64 volume = 11;
   required int32 mode = 12;
   required int64 size = 13;
   required int64 version = 14;
   required int32 max_read_freshness = 15;
   required int32 max_write_freshness = 16;
   required string name = 17;
   
   required int64 write_nonce = 18;
   required int64 xattr_nonce = 19;
   
   required int64 generation = 20;
   
   optional uint64 parent_id = 21;
   optional string parent_name = 22;
   optional int64 num_children = 23;    // actual number of children
   optional int64 capacity = 24;        // range in the children index where the children can be
}

// object update
message ms_update {
   enum UpdateType {
      CREATE = 1;
      UPDATE = 2;
      DELETE = 3;
      CHCOORD = 4;
      RENAME = 5;
      SETXATTR = 6;
      REMOVEXATTR = 7;
      CHMODXATTR = 8;
      CHOWNXATTR = 9;
      VACUUM = 10;
      UPDATE_ASYNC = 11;
      DELETE_ASYNC = 12;
      CREATE_ASYNC = 13;
      
      NUM_UPDATE_TYPES = 14;
   }

   required int32 type = 1;
   required ms_entry entry = 2;
   optional ms_entry dest = 3;          // used by rename
   optional string xattr_name = 4;      // used by setxattr and removexattr
   optional string xattr_value = 5;     // used by setxattr
   optional bool xattr_create = 6;      // used by setxattr
   optional bool xattr_replace = 7;     // used by setxattr
   optional int32 xattr_mode = 8;       // used by chmodxattr, setxattr
   optional uint64 xattr_owner = 9;     // used by chownxattr, setxattr (on create)
   
   repeated uint64 affected_blocks = 10;      // blocks affected by the write (on UPDATE)
}

// collection of object updates
message ms_updates {
   required string signature = 1;
   repeated ms_update updates = 2;
}

// ms directory listing
message ms_listing {
   enum ListingType {
      NEW = 1;
      NOT_MODIFIED = 2;
      NONE = 3;
   }

   required int32 status = 1;           // cached status (one of the above).  Will be NONE on error.
   required int32 ftype = 2;            // was this a file or directory we accessed?
   repeated ms_entry entries = 3;       // if this was a directory, then this contains its children.  Otherwise, entries[0] is the entry's data
}

// metadata information for the entries of a path
message ms_reply {
   required uint64 volume_version = 1;           // version of this volume's metadata
   required uint64 cert_version = 2;             // Volume certificate bundle version
   required string signature = 3;                // Volume signature
   required int32 error = 4;                     // error code for the overall request
   optional string errormsg = 5;                 // error message
   
   optional ms_listing listing = 6;             // listing of one or more entries generated by the request
   optional string xattr_name = 7;              // setxattr() only
   optional string xattr_value = 8;             // getxattr() only 
   repeated string xattr_names = 9;             // listxattrs() only
   
   optional int64 file_version = 10;            // VACUUM only
   optional int64 manifest_mtime_sec = 11;          
   optional int32 manifest_mtime_nsec = 12;
   repeated uint64 affected_blocks = 13;
   
   repeated int32 errors = 14;                   // error codes for multiple requests
}

// key/value arguments for replica drivers
message ms_keyword_arg {
   required string key = 1;
   required string value = 2;
}

// metadata information on a block/manifest request to an RG or AG
message ms_gateway_request_info {
   enum ReplicaType {
      MANIFEST = 1;
      BLOCK = 2;
   }
   
   required int32 type = 1;
   required uint64 file_id = 2;           // ID of this file
   required int64 file_version = 3;       // version of this file 
   required uint64 block_id = 4;          // ID of the block
   required int64 block_version = 5;      // version of he block
   required uint64 size = 6;              // size of the block or manifest
   required int64 file_mtime_sec = 7;     // time of the write that created this block (seconds).  Derived from the manifest, if from a UG.
   required int32 file_mtime_nsec = 8;    // time of the write that created this block (nanoseconds).  Derived from the manifest, if from a UG.
   required uint64 owner = 9;             // ID of the SyndicateUser that owns this file
   required uint64 writer = 10;           // ID of the UG that created this message
   required uint64 volume = 11;           // ID of the Volume that this file/UG belong to
   required string hash = 12;             // secure hash (SHA256) of the block or manifest bits
   
   repeated ms_keyword_arg args = 13;     // driver-specific arguments
   
   required string signature = 14;        // signature of this message, from the sender gateway's private key
}


// gateway certificate
message ms_gateway_cert {
   enum GatewayType {
      USER_GATEWAY = 1;
      REPLICA_GATEWAY = 2;
      ACQUISITION_GATEWAY = 3;
      
      NUM_CERT_TYPES = 4;
   }
   
   enum Capabilities {
      CAP_READ_DATA = 1;
      CAP_WRITE_DATA = 2;
      CAP_READ_METADATA = 4;
      CAP_WRITE_METADATA = 8;
      CAP_COORDINATE = 16;
   }
   
   required uint64 version = 1;           // version of this certificate
   
   required uint32 gateway_type = 2;      // type of gateway
   required uint64 gateway_id = 3;        // ID of this gateway
   required uint64 owner_id = 4;          // ID of user that owns this gateway
   required string name = 5;              // name of gateway
   required string host = 6;              // hostname of this gateway
   required int32 port = 7;               // port number of this gateway
   required string public_key = 8;        // public key of this gateway
   required int64 cert_expires = 9;       // when the certificate expires
   required uint64 caps = 10;             // capabilities
   required string closure_text = 11;     // serialized closure information
   required uint64 volume_id = 12;         // which Volume we're bound to
   
   required string signature = 13;        // base64-encoded Volume signature of this cert
}


// Volume metadata
message ms_volume_metadata {
   required uint64 blocksize = 1;
   required uint64 owner_id = 2;               // UID of the volume owner
   required uint64 volume_id = 3;             // volume ID
   required uint64 volume_version = 4;          // volume metadata version
   required uint64 cert_version = 5;            // Volume cert bundle version
   required string name = 6;
   required string description = 7;
   required string volume_public_key = 8;
   required bool archive = 9;
   required bool private = 10;
   required bool allow_anon = 11;
   
   required string signature = 12;              // base64-encoded Volume signature of this message
   
   optional ms_entry root = 13;                 // root directory
   optional string cache_closure_text = 14;     // serialized closure for connecting to the caches
}


// Registration metadata
message ms_registration_metadata {
   required ms_gateway_cert cert = 1;         // session certificate for the requester
   required string session_password = 2;      // session password
   required int64 session_expires = 3;        // when the session password expires
   required ms_volume_metadata volume = 4;    // the Volume we're subscribed to
   required string signature = 5;               // (base64) signed by Volume public key
   required int32 resolve_page_size = 6;                // number of entries we're allowed to ask for at once in a request
   optional string encrypted_gateway_private_key = 7;   // Gateway's private key, previously sealed on upload
   optional int32 max_connections = 8;                  // MS-given hint on the maximum number of connections to open at once 
   optional int32 max_batch_request_size = 9;           // MS-given hint on the maximum number of synchronous requests to send per multi-request
   optional int32 max_batch_async_request_size = 10;     // MS-given hint on the maximum number of asynchronous requests to send per multi-request
   optional int32 max_transfer_time = 11;             // MS-given hint on how long to wait for metadata before trying again
}


// OpenID authentication response
message ms_openid_provider_reply {
   required string redirect_url = 1;
   required string auth_handler = 2;
   required string username_field = 3;
   required string password_field = 4;
   required string extra_args = 5;
   required string challenge_method = 6;
   required string response_method = 7;
   required string redirect_method = 8;
   required string signature = 9;               // signed with the Syndicate private key
}

// Registration request using the user's private key to prove Gateway ownership
message ms_register_request {
   enum AuthMethod {
      AUTH_PUBLIC_KEY = 1;
   }
   
   required uint32 gateway_type = 1;                // uses ms_gateway_cert.GatewayType 
   required string gateway_name = 2;
   required string username = 3;
   required string nonce = 4;
   required string signature = 5;                   // signed with user public key
}


